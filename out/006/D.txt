1. 問題概要
2. アルゴリズム

2014/4/5

©AtCoder Inc. All rights reserved.

28


• 1～Nまでの数字が書かれたカードがN枚存在する
• 山札からカードを1枚抜き取り、任意の場所に挿入
することが可能
• 山札をソートしたい時に、並び替える必要のある最
小数を求めなさい

• 実は、多くのコンテストに出題されている、超典型問題です。

2014/4/5

29


• 問題のイメージ
– 以下のようなカードが与えられる
– カードを抜いて入れ替える

1

2014/4/5

3

5

2

4

6

30


• 問題のイメージ
– 以下のようなカードが与えられる
– カードを抜いて入れ替える
• これを繰り返してソートさせる

1

2014/4/5

2

3

5

4

6

31


• 問題のイメージ
– 以下のようなカードが与えられる
– カードを抜いて入れ替える
• これを繰り返してソートさせる

– ソートが完了するまでの最小手数を出力する
• 今回の場合は2

1

2014/4/5

2

3

4

5

6

32


• 制約
– 部分点1
• N≦16

– 部分点2
• N≦1000

– 満点
• N≦30000

2014/4/5

33


• 考察
– 全ての並び替えパターンは、n!通り存在する
• これを全て考えるのは不可能

– 何か工夫をしなければ、解くことは難しい

2014/4/5

34


• 先ほどのサンプルでは、「２」と「４」のカードを動かす
ことになった。

1

2014/4/5

2

3

4

5

6

35


• 先ほどのサンプルでは、「２」と「４」のカードを動かす
ことになった。
– 1個ずつ動かしたが、図のように一気に複数抜いて、一気
に複数差し込んでも良い。

2

1

2014/4/5

4

3

5

6

36


• 先ほどのサンプルでは、「２」と「４」のカードを動かす
ことになった。
– 1個ずつ動かしたが、図のように一気に複数抜いて、一気
に複数差し込んでも良い。

– この時、差し込んでソートできる条件は、取り除いた列が
ソート済みになっていること

1

2014/4/5

3

5

6

37


• つまり、「どのカードを残すか」を全探索することに
よって、その残されたカードがソート済みになってい
るかどうか調べれば良い。
– この組み合わせは、Nに対して2^N通りしか存在しない。
• Nが16程度であれば間に合う

• 2^N通りに対し、全列挙を行い、増加列になっている
ものの中で、最も残す数が多いものを調べれば良
い。
– ABC002 D問題「派閥」と同じ考え方
• 002のDと同じアルゴリズムが10点でごめんなさい＞＜
2014/4/5

38


• 2^n全列挙の仕方
– 深さ優先探索を使う
• 普通に1つずつ、使う使わないを判定する
• 自然な実装になりやすい？

– 整数のbitを用いた探索を使う
• ABC002と同様
• 時間がないので後で書いて再アップロードします＞＜

2014/4/5

39


• さらに計算を早くするには？
– 残す列がソート済みになっていれば良い、という点に着目
する

• 「どのように入れ替えるか」ではなく、「カードを抜い
てソートされた状態にするとき、残ったカードの数が
最大にする方法」を考える

2014/4/5

40


• 増加列を求める方法
– 普通に深さ優先探索をすると前回と同じ
– 動的計画法を使おう！
• 左から順番に、「最後にそのカードを使った時の、最大の列の長
さはいくつか」を計算していく
• 最初は1

1

1
2014/4/5

3

5

2

4

6
41


• 増加列を求める方法
– 普通に深さ優先探索をすると前回と同じ
– 動的計画法を使おう！
• 左から順番に、「最後にそのカードを使った時の、最大の列の長
さはいくつか」を計算していく
• 最初は1
• 次の値は、前の値を利用して、最大値から計算する

2014/4/5

1

2

1

3

5

2

4

6
42


• 増加列を求める方法
– 普通に深さ優先探索をすると前回と同じ
– 動的計画法を使おう！
• 左から順番に、「最後にそのカードを使った時の、最大の列の長
さはいくつか」を計算していく
• 次の値は、前の値を利用して、最大値から計算する

2014/4/5

1

2

3

2

3

1

3

5

2

4

6
43


• 計算量の考察
– 各カードを選ぶ部分がO(n)
– そのカードから前のカードの部分列の最大値を選ぶ部分
がO(n)
– 併せてO(n^2) 1000程度であれば計算可能となる。

2014/4/5

1

2

3

2

3

1

3

5

2

4

6
44


• さらに計算を早くするには？
– データの持ち方を変えよう！
– ここまで出てきた中で、k枚の部分列が作れるもののうち、
もっともカードの値が小さいものを持つ

2014/4/5

増加列

0

1

2

3

4

5

カード

-INF

INF

INF

INF

INF

INF

1

3

5

2

4

6
45


• さらに計算を早くするには？
– データの持ち方を変えよう！
– ここまで出てきた中で、k枚の部分列が作れるもののうち、
もっともカードの値が小さいものを持つ
増加列

0

1

2

3

4

5

カード

-INF

1

INF

INF

INF

INF

1

1
2014/4/5

3

5

2

4

6
46


• さらに計算を早くするには？
– データの持ち方を変えよう！
– ここまで出てきた中で、k枚の部分列が作れるもののうち、
もっともカードの値が小さいものを持つ

2014/4/5

増加列

0

1

2

3

4

5

カード

-INF

1

3

INF

INF

INF

1

2

1

3

5

2

4

6
47


• さらに計算を早くするには？
– データの持ち方を変えよう！
– ここまで出てきた中で、k枚の部分列が作れるもののうち、
もっともカードの値が小さいものを持つ

2014/4/5

増加列

0

1

2

3

4

5

カード

-INF

1

3

5

INF

INF

1

2

3

1

3

5

2

4

6
48


• さらに計算を早くするには？
– データの持ち方を変えよう！
– ここまで出てきた中で、k枚の部分列が作れるもののうち、
もっともカードの値が小さいものを持つ

2014/4/5

増加列

0

1

2

3

4

5

カード

-INF

1

2

5

INF

INF

1

2

3

2

1

3

5

2

4

6
49


• さらに計算を早くするには？
– データの持ち方を変えよう！
– ここまで出てきた中で、k枚の部分列が作れるもののうち、
もっともカードの値が小さいものを持つ

2014/4/5

増加列

0

1

2

3

4

5

カード

-INF

1

2

4

INF

INF

1

2

3

2

3

1

3

5

2

4

6
50


• さらに計算を早くするには？
– データの持ち方を変えよう！
– ここまで出てきた中で、k枚の部分列が作れるもののうち、
もっともカードの値が小さいものを持つ

2014/4/5

増加列

0

1

2

3

4

5

カード

-INF

1

2

4

6

INF

1

2

3

2

3

4

1

3

5

2

4

6
51


• 考察
– このカードの配列は、絶対に昇順になっている
• よって、足すべき部分は1か所しかなく、二分探索で求めることが
可能である
• 下図は、今見ているカードを3だとする

2014/4/5

増加列

0

1

2

3

4

5

カード

-INF

1

2

4

6

INF

52


• 考察
– このカードの配列は、絶対に昇順になっている
• よって、足すべき部分は1か所しかなく、二分探索で求めることが
可能である
• 下図は、今見ているカードを3だとする

2014/4/5

増加列

0

1

2

3

4

5

カード

-INF

1

2

4

6

INF

53


• 考察
– このカードの配列は、絶対に昇順になっている
• よって、足すべき部分は1か所しかなく、二分探索で求めることが
可能である
• 下図は、今見ているカードを3だとする

2014/4/6

増加列

0

1

2

3

4

5

カード

-INF

1

2

4

6

INF

54


• 考察
– このカードの配列は、絶対に昇順になっている
• よって、足すべき部分は1か所しかなく、二分探索で求めることが
可能である
• 下図は、今見ているカードを3だとする こんな感じで求まる

2014/4/6

増加列

0

1

2

3

4

5

カード

-INF

1

2

4

6

INF

55


• 考察
– このカードの配列は、絶対に昇順になっている
• よって、足すべき部分は1か所しかなく、二分探索で求めることが
可能である

– よって、計算量はO(nlogn)となる。

2014/4/5

増加列

0

1

2

3

4

5

カード

-INF

1

2

4

6

INF

56


• おまけ
– 最長増加部分列(Longest Increasing Subsequence)と呼ば
れる有名なアルゴリズムです。
• 動的計画法に慣れていれば、知らなくても解ける問題ではありま
す。

2014/4/5

57


