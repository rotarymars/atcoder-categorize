1. 問題概要
2. アルゴリズム

2014/11/22

©AtCoder Inc. All rights reserved.

14


• K択問題がN個あります。
• 全ての選択肢に内部的に整数が割り当てられてお
り、選ばれた選択肢のXOR(排他的論理和)の値を利
用するが、この値が0になるとバグが発生する。
• 選択肢に割り当てられた整数が与えられるので、バ
グが発生することがあり得るかを判定しなさい。
• 制約
– 1≦N≦5
– 1≦K≦5
– 0 ≦ Ti,j ≦ 127
2014/11/22

15


• どう解くか？
– 質問の数は5つ、選択肢も5つ
• 非常に数が少ない！

– つまり、全探索することが可能！
– どうやって全探索をしよう？

2014/11/22


• 1つの質問だったら？
– ForループでK回回せば、全通り試せる

• 2つの質問だったら？
– Forループを2重で組み合わせれば、全通り試せる

• 3つの質問だったら？
– Forループを3重で組み合わせれば、全通り試せる

• ・・・・こんなのはやってられない！

2014/11/22


• 1つの質問だったら？
– ForループでK回回せば、全通り試せる

• 2つの質問だったら？
– Forループを2重で組み合わせれば、全通り試せる

• 3つの質問だったら？
– Forループを3重で組み合わせれば、全通り試せる

• ・・・・こんなのはやってられない！

2014/11/22


• ではどう解くか？
• 深さ優先探索を使おう！
– 深さ優先探索って？

2014/11/22


• 深さ優先探索
– こんなの

スタート

質問1A

質問2A

2014/11/22

質問2B

質問2C

質問1B

質問2A

質問1C

質問2B

質問2C


• 深さ優先探索
– こんなの

スタート

質問1A

質問2A

2014/11/22

質問2B

質問2C

質問1B

質問2A

質問1C

質問2B

質問2C


• 要するにどういうこと？
– 質問や選択肢の数に合わせて、潜って行くように探索し
ていく！
– こうすることで、全ての質問の組み合わせに対して調べる
ことが出来る！
• でもどう組むの？

2014/11/22


• 再帰関数を使おう！
– 自分の関数の内部で、自分を呼び出す！
– 例えばこんな感じ
• 最初はdfs(0, 0);って感じで呼び出す

今の質問数、値から
今どこにいるかを格納

bool dfs(int numQ, int value){
質問がもうなければ
if(numQ == N) return (value == 0);
0になっているかを調べる
for(int i = 0; i < K; i++){
if(dfs(numQ+1, value^T[numQ,i])) return true;
}
return false;
dfs関数の中から、
dfsをもう一度呼び出す！
}
探索した結果、0になる組
み合わせが無ければfalse
2014/11/22


• 計算時間は大丈夫？
– N回の質問で、K回の選択肢
– 全ての組み合わせは𝐾 𝑁 個
– N,Kともに5以下なので、この組み合わせの数は大したこと
がない
• 最も深いループが1億程度回らなければ、制限時間に間に合うこ
とが多い

2014/11/22


• 他の方法は？
– 深さ優先探索で、もう少し工夫する方法
• 「今までの質問数」「ここまでの値」が同じものを1度調べていれば、
もう調べる必要がない
– こうすることにより、計算量を𝐾 𝑁 からNKまで減らせる

– 幅優先探索などでももちろん良い
• 一筆書きのように調べるのではなく、１手１手進めていく方法
• 詳しくは他の幅優先探索を使う問題を見てね！

2014/11/22


• 幅Wの領域に、幅A[i]、価値B[i]の、N枚のスクショを選
択して貼りつける
• 貼りつけられるスクショは、
– 合計枚数がK枚以下
– 合計の幅がW以下

• でなければならない。価値の和の最大値を求めなさい。

• 制約
– 1≦N≦50
– 1≦W≦10000
– 1≦A[i],B[i]≦1000
2014/11/22

