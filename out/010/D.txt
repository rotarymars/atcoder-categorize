1. 問題概要
2. アルゴリズム

2014/6/7

©AtCoder Inc. All rights reserved.

24


• 高橋君の作ったSNSの、友人関係が与えられる。
• 特定の人たちに対して、メッセージを届かないように
したい。
• このため、以下のような工作を行う。
– 友人関係を1つ解消する。
– 一人のパスワードを変更し、メッセージを閲覧不可能にす
る

• 工作を行う回数の必要数を出力しなさい

2014/6/7

25


• 制約
– 1 ≦ V ≦ 100
– 0 ≦ G ≦ V-1
– 0 ≦ E ≦ V * (V-1) / 2

• 部分点の制約
– 0 ≦ E ≦ V * (V-1) / 2

2014/6/7

26


• 以下のような図を考える

7

1
5
2

6
8

0
3
9

4
2014/6/7

27


• 以下のような図を考える
• 最適解はこんな感じ
7

1
5
2

6
8

0
3
9

4
2014/6/7

28


• 以下のような図を考える
• 適当に線に×をつける
7

1
5
2

6
8

0
3
9

4
2014/6/7

29


• 以下のような図を考える
• 適当に線に×をつける
• 高橋君から辿りつけてしまう女の子のパスを変える
7

1
5
2

6
8

0
3
9

4
2014/6/7

30


• つまり、「工作を行う友人関係」の数さえ分かれば、
高橋君から辿りつける友人を探索で求め、その数を
求めれば良い！
7

1
5
2

6
8

0
3
9

4
2014/6/7

31


• 部分点１の時は、友人関係の時は12以下
– つまり、工作を行うかどうかは2^12通り！
– 2^12通り全て試してしまえば良い

• 全探索のやり方は、幾つかある
– 深さ12の深さ優先探索を行う
– 整数のbitを利用して、0から(1<<12)-1までのループを回
す

2014/6/7

32


• 整数のbitを利用する方法
– 例えば、E=3の時、0から7までのループを回す
• 0 → 2進数だと000
• 1 → 2進数だと001
• 2 → 2進数だと010
• 3 → 2進数だと011
• 4 → 2進数だと100
• 5 → 2進数だと101
• 6 → 2進数だと110
• 7 → 2進数だと111

– これを利用する。

2014/6/7

33


• 整数のbitを利用する方法
– 例えば、E=3の時、0から7までのループを回す
• 0 → 2進数だと000
• 1 → 2進数だと001
• 2 → 2進数だと010
• 3 → 2進数だと011
• 4 → 2進数だと100
• 5 → 2進数だと101
• 6 → 2進数だと110
• 7 → 2進数だと111

– 一つ目の人間関係は、1ケタ目を見る

2014/6/7

34


• 整数のbitを利用する方法
– 例えば、E=3の時、0から7までのループを回す
• 0 → 2進数だと000
• 1 → 2進数だと001
• 2 → 2進数だと010
• 3 → 2進数だと011
• 4 → 2進数だと100
• 5 → 2進数だと101
• 6 → 2進数だと110
• 7 → 2進数だと111

– ２つ目の人間関係は、2ケタ目を見る

2014/6/7

35


• 整数のbitを利用する方法
– K桁目のbitを取得するには？ （0ケタ目から数えて）
• 求めたい整数がiとして
• (i >> k) % 2 を計算すれば良い！

– K個bitを右にずらした後、2で割った余りを求めれば良
い！

2014/6/7

36


• 計算量
– 全探索の回数 O(2^E)
– それぞれの幅優先探索の処理数 O(V)
– 併せて、計算量はO(V 2^E)
– 10万程度なので余裕で間に合う！
• 豆知識：C++なら1億回の計算で1秒くらい。

2014/6/7

37


• 部分点解法のままだと・・・？
– Eは最大4500まで
– 2^4500は地球が爆発しても列挙できない。
– 絶対に間に合わない！

• 何かもっと早いアルゴリズムを考えなくてはならない

2014/6/7

38


• 以下のような図を考える

7

1
5
2

6
8

0
3
9

4
2014/6/7

39


• 以下のような図を考える ちょっとずらす
– 工作の種類が2パターンあるのが面倒なので、これを纏
めたい
7

1
5
2

6
8

0
3
9

4
2014/6/7

40


• 以下のような図を考える ちょっとずらす
• 最後に、「メッセージをログインして閲覧する」という
処理を追加する
7

1
5
2

6
8
G

0
3
9

4
2014/6/7

41


• この図に対し、0からGに行けなくなるように、線に×
をつければ良い。

7

1
5
2

6
8
G

0
3
9

4
2014/6/7

42


• この図に対し、0からGに行けなくなるように、線に×
をつければ良い。
– このように、切断するための最小数を「最小カット」と言う
7

1
5
2

6
8
G

0
3
9

4
2014/6/7

43


• 最小カットの求め方
– 最小カット最大フロー定理を利用しよう！
• グラフの最小カットは、最大フローと一致するよ！という定理です

– じゃあ最大フローってなあに？

2014/6/7

44


• 最大フローって？
– 0からGに辿り着くための、線が何本引けるか、という問題
• 今回の場合は2本 これ以上引くことは出来ない。

7

1
5
2

6
8
G

0
3
9

4
2014/6/7

45


• 最大フローって？
– 0からGに辿り着くための、線が何本引けるか、という問題
• 今回の場合は2本 これ以上引くことは出来ない。

– 今回の問題の場合は、全ての辺の容量が1だが、容量が
1でない場合でも良い
• つまり、同じ線に２本も３本も線を通しても良い、という制約でも良
い
• 良くわからなかったら気にしないでOKです。

2014/6/7

46


• 最大フローの求め方
– 幅優先探索で、何回Gまでたどり着けるか計算しよう！！
• ・・・・本当にそれでいいの？

2014/6/7

47


• 実際にやってみよう！
– 矢印になってますが、今は気にしないでください。

０

2014/6/7

1

5

2

6
Ｇ

3

7

4

8
48


• 適当に１本ずつ引く

０

2014/6/7

1

5

2

6
Ｇ

3

7

4

8
49


• 適当に１本ずつ引く

０

2014/6/7

1

5

2

6
Ｇ

3

7

4

8
50


• 適当に１本ずつ引く

０

2014/6/7

1

5

2

6
Ｇ

3

7

4

8
51


• 適当に１本ずつ引く
– もう引けないので答えは3?

本当は4

1

5

2

6

０

2014/6/7

Ｇ

3

7

4

8
52


• 普通に幅優先探索してもダメ
– 使う辺の順番によって、正しくない解になってしまう。
– ここで、特別な処理をしてあげることによって、正しい解を
出すことが出来る！

2014/6/7

53


• 今までは、普通に矢印にフラグを付けるだけだった。

０

2014/6/7

1

5

2

6
Ｇ

3

7

4

8
54


• 今までは、普通に矢印にフラグを付けるだけだった。
– 今まで通ったところの矢印の向きを変えてみよう！！！

０

2014/6/7

1

5

2

6
Ｇ

3

7

4

8
55


• 今まで通ったところの矢印の向きを変えてみる
– 新しいルートが出来た！

０

2014/6/7

1

5

2

6
Ｇ

3

7

4

8
56


• これで、正しい答えを求めることが出来る！

０

2014/6/7

1

5

2

6
Ｇ

3

7

4

8
57


• 注意点
– 今回の問題は、矢印じゃなくて、両方向に繋がっている

０

2014/6/7

1

G


• 注意点
– 今回の問題は、矢印じゃなくて、両方向に繋がっている
– であれば、矢印2つに変換しちゃおう！
• これで先ほどのアルゴリズムが問題なく使えます。

０

2014/6/7

1

G


• 注意点
– 実装が出来ない！という方へ
• 今回のアルゴリズムは、かなり実装が難しいです。
• 他の人のソースコードは、最大フローを求める色々なアルゴリズ
ムを使っている場合があります。
– Edmonds-Karp
» 先ほど説明した幅優先探索で求めるアルゴリズム

– Dinic
» 幅優先探索と深さ優先探索を組み合わせるアルゴリズム

– Goldberg-Tarjan
» ヒューリスティックでなんか早くなるアルゴリズム

• 個別のアルゴリズムに興味があれば、本や参考サイトで調べるこ
とをお勧めします。

2014/6/7


