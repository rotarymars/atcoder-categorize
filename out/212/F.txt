
		公式
		
			
				F - Greedy Takahashi 解説
			
			by penguinman
			
		
		
		
		
			高橋くんが時刻 \(X_i\) に都市 \(Y_i\) から行動を開始したあと、初めて乗るバスが \(j\) 本目のバスであるとします。そのようなバスが存在しない場合、および \(Z_i \leq S_j\) である場合、明らかに高橋くんは時刻 \(Z_i\) の時点で都市 \(Y_i\) にいます。また、\(S_j \lt Z_i \leq T_j\) を満たす場合、高橋くんは時刻 \(Z_i\) の時点で \(j\) 本目のバスに乗っています。
これ以降は、そのいずれでもない場合について考えます。

さて、以下の条件を満たす正整数 \(k\) を二分探索することを考えましょう。


高橋くんが \(j\) 本目のバスから始めて合計 \(k\) 本のバスに乗ったとする。このとき、一番最後に乗ったバスを乗り終わった時刻 \(k'\) は \(Z\) 以下である。


このような \(k\) が求まってさえいれば、高橋くんが時刻 \(Z_i\) の時点でどのバスに乗っているか、あるいはどの都市にいるかは単純な場合分けによって求めることができます。

判定問題を解く際に必要なものは、「一番最後に乗ったバスは（\(M\) 本のバスのうち）何本目のバスであるか」という情報です。この情報は、ダブリングというアルゴリズムを用いることで、前計算 \(O(M \log M)\)、\(1\) つの判定問題につき \(O(\log M)\) で求めることができます。

具体的な求め方は以下の通りです。


まず始めに、前計算として、\(\lceil \log_2 M \rceil = L\) として、\(i=1,2,\ldots,M\) 及び \(j=0,1,2,\ldots,L\) について、以下によって定義づけられる値 \(\text{r}[i][j]\) を求めておく。


高橋くんが \(i\) 本目のバスから始めてちょうど \(2^j\) 回乗り換えた、即ち合計で \(2^j+1\) 本のバスに乗ったとき、彼が乗っているバスは（\(M\) 本のバスのうち）\(\text{r}[i][j]\) 本目のバスである。


このような値 \(\text{r}[i][j]\) は、\(1 \leq j\) であるならば \(\text{r}[1][j-1],\text{r}[2][j-1],\ldots,\text{r}[M][j-1]\) の値を利用して求めることができるため、始めに各 \(i\ (1 \leq i \leq M)\) について \(\text{r}[i][0]\) を求めたあと、\(j\) の昇順に値を求めていくことで \(O(ML)=O(M \log M)\) 回の計算で全ての値を求めることができる。

次に、実際に判定問題を解くことを想定する。求めるべき情報が「高橋くんが \(j\) 本目のバスから始めてちょうど \(k\) 本のバスに乗ったとき、彼が最後に乗ったバスは（\(M\) 本のバスのうち）何本目のバスか」というものであるとき、はじめ \(j\) で初期化された変数 \(now\) について、\(i=0,1,2,\ldots,L\) の順に以下を行う。


\(k-1\) を \(2\) 進数表記した際、\(2^i\) の位の数字が \(1\) であるなら \(now\) を \(\text{r}[now][i]\) で置き換える。


この操作によって得られた最終的な \(now\) が、求めたかった情報である。計算量は \(O(L)=O(\log M)\) となる。


以上により、この問題を解くことができました。計算量は、合計すると \(O(M \log M + Q \log^2 M)\) となります。

実装例 (Python)



なお、ダブリング内部で二分探索を行うことで \(O((M+Q) \log M)\) で解くことも可能です。この計算量を要求されることも多々あるため、覚えておいた方がよいでしょう。

実装例 (C++)



この他にも、あるバスからその次に乗るバスへ辺を貼ったグラフが根付き木の形になることを利用して問題を解くことも可能です。計算量はこちらも \(O((M+Q) \log M)\) です。

実装例 (C++)



		
		
			
				投稿日時:
				
				
			
				
				最終更新:
				
				
			
			
		
	
