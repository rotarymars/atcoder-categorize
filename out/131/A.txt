正解までの道のりを細かく分割すると次の通りです．

1. 標準入力から文字列を受け取る．
2. 文字列の隣り合う文字同士を比較することで，文字列が「入力しずらい」かを判定する．
3. 判定結果に対応する文字列 (“Good” か “Bad”) を標準出力に出力する．
手順 2 (判定) については，正規表現を用いて簡潔に書くことも可能です．実装例を以下に示します．
Listing 1 C++ での実装例

#include <iostream>
#include <string>
3 using std::cin;
4 using std::cout;
5 using std::endl;
6 using std::string;

1

2

7
8
9

int main(void){
string s;

10
11
12

// 入力
cin >> s;

13
14
15
16
17
18

// 隣り合う文字を比較して判定
bool isgood = true;
if (s[0] == s[1]) isgood = false;
if (s[1] == s[2]) isgood = false;
if (s[2] == s[3]) isgood = false;

19
20
21
22

// 出力
if (isgood) {
cout << "Good" << endl;
1

} else {

23

cout << "Bad" << endl;

24

}

25
26

return 0;

27
28

}
Listing 2 Ruby での実装例

# 入力
2 s = gets().chomp()

1

3

# 正規表現を使って判定・出力
if s =~ /(.)\1/ then
6
puts "Bad"
4
5

7

else
puts "Good"

8
9

end

Listing 3 Brainf*ck での実装例

>+++>>,<+++[->>,[-<->>+<]<[[-]<<->>]>>[-<<+>>]<<<]+<[[-]>++++++++++[-<++++++>]<.
[--<+++>]<--.+++>]>[++++++++[-<++++++++>]<-.+++[-->+++<]>..[-<<+>>]<<----------3 >>]]<<.
1
2

2

Here is a step-by-step instruction how to solve the problem:
1. Receive the string form the standard input.
2. Judge if the string is ”hard to enter” by checking the adjacent characters.
3. Output a string corresponding to the judge result (“Good” or “Bad”)
to the stdout.
The second procedure (judgement) can be written concisely with regular
expressions. The following are implementation examples.
Listing 1: An implementation example in C++
1 #include <iostream>
2 #include <string>
3 using std::cin;
4 using std::cout;
5 using std::endl;
6 using std::string;
7
8 int
9
10
11
12
13
14
15

main(void){
string s;

// Input
cin >> s;
// Compare the adjacent characters and judge
bool isgood = true;
9

16
17
18
19
20
21
22
23
24
25
26
27
28 }

if (s[0] == s[1]) isgood = false;
if (s[1] == s[2]) isgood = false;
if (s[2] == s[3]) isgood = false;

// Output
if (isgood) {
cout << "Good" << endl;
} else {
cout << "Bad" << endl;
}
return 0;

Listing 2: An Implementation example in Ruby
1 # Input
2 s = gets().chomp()
3
4 # Compare the adjacent
5 if s =~ /(.)\1/ then
6
puts "Bad"
7 else
8
puts "Good"
9 end

characters and judge

Listing 3: An implementation example in Brainf*ck
1 >+++>>,<+++[->>,[-<->>+<]<[[-]<<->>]>>[-<<+>>]<<<]+<[[-]>++++++++++[-<++++++>]<

2 [--<+++>]<--.+++>]>[++++++++[-<++++++++>]<-.+++[-->+++<]>..[-<<+>>]<<---------3 >>]]<<.

10

