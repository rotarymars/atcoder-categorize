
		公式
		
			
				Ex - Unite 解説
			
			by mechanicalpenciI
			
		
		
		
		
			行について上から順に、さらにその行の中で左のマスから順に黒く塗るかどうかを決めていく(より正確には決めて行った時の状態を管理する)事を考えます。

あるマスまでの塗り方を決めた時、それ以降に新しく塗るマスは、塗り方が決まっているマスのうち、各列の一番下の行のマスとしか新しく辺で接しません。そのため、あるマスまでの塗り方を決めた時に、管理しなければ次の通りです。


どのマスまでの塗り方を決めたか
すでに塗り方が決まっているマスのうち、各列の一番下の行のマスは何色で塗られているか
上記の各列の一番下の行にあるマスのうち黒く塗られているマスについて、それぞれが同一の連結成分に属するかどうか


なお、孤立した連結成分が完成しているかどうかについては、完成した状態、すなわちすでに塗り方が決まっているマスのうち、各列の一番下の行のマスは白マスで塗られているが、その上には黒いマスの連結成分が存在するような状態に対して、それ以降に最初から黒く塗られているマスが存在するならば、条件をみたさず、そうでないならばそれ以外のマスは白く塗られたままにするほかないため、ただちにその状態の探索を終了することができる事に注意します。

一番下の行の塗り方は \(2^7\) 通り、同一の行で隣り合っている黒いマスは必ず同一の連結成分に属する事を考えると高々 \(4\) つの連結成分しか存在しないため、状態としては高々 \(4!\) 通り程度しかなく、特定のマスまでの塗り方を決めた時の状態数は全体で高々 \(2^7\cdot 24\sim 3000\) 程度しかありません。(実際はもっと少ないです)

それぞれの状態と新しく塗るマスから次の状態は一意に定まるため、各状態に対して、その状態にするために塗らなければならない最小のマスの数(不可能な場合は\(\infty\) など)を求めて遷移させていくことで、答えを求めることができます。

実装方針は様々なものが考えられますが、全体で考慮する必要のある状態が \(3000\cdot (NM)\sim 2\times 10^6\) 程度であるため、map などを使って状態を管理しても十分間に合います。

c++ による実装例 :



		
		
			
				投稿日時:
				
				
			
				
				最終更新:
				
				
			
			
		
	
