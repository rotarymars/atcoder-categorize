(円の周長) = (円の半径) * 2 * (円周率)
の式より、答えを求めることができます。以下に、今回の問題の注意点をあげておきます。

円周率の求め方
あらかじめ定数として宣言しておいたり、言語によっては標準ライブラリから求めることもできま
す。(今回は誤差の許容範囲が広いので、実は 3.14 まで求めておけば十分です)。

浮動小数点数の出力
これは言語によって仕様が異なるため一概には言えませんが、整数型への自動的な丸めの発生等に
注意しながら実装してください。
以下が、c++ のサンプルコードです。
1

#include <iostream>

2

#include <math.h>

3

#include <iomanip>

4
5

int main(){

6

int R;

7

std::cin>>R;

8
9

const double pi=acos(-1.0);

10
11

double answer=2*R*pi;

12
13

std::cout<<std::setprecision(20)<<std::fixed<<answer<<std::endl;

1

14

return 0;

15
16

}

以下が、Python のサンプルコードです。
1

print(int(input())*6.3)

2

You can ﬁnd the answer by the following equations:
(The circumference of a circle) = (the radius of the circle) * 2 * (Pi)
Here are some points of this problem.

The way to ﬁnd Pi
You can deﬁne as a constant beforehand, or it can be also found with the standard library
depending on the language. (This time, the accepted range of ﬂoating point error is wide, so in
fact it is suﬃcient to use 3.14.)

Outputting ﬂoating point numbers
It depends on the speciﬁcation of the language, but be careful of some points like automatic
rounding to the integer type when implementing.
The following is a sample code in C.
1

#include <iostream>

2

#include <math.h>

3

#include <iomanip>

4
5

int main(){

6

int R;

7

std::cin>>R;

8

const double pi=acos(-1.0);

9
10

double answer=2*R*pi;

11
12

std::cout<<std::setprecision(20)<<std::fixed<<answer<<std::endl;

13
14

return 0;

15
16

}

The following is a sample code in Python.
1

print(int(input())*6.3)

8

