次の漸化式を立てます．

dp[i][j] := 先頭 i 文字として考えられるもののうち，13 で割ったあまりが j であるものの数
このとき i の昇順に dp テーブルを見ると，i − 1 文字目までを 13 で割ったあまり (dp[i − 1][j] の j) と

s[i] としてあり得る数字を全て試すことで dp[i][0] ∼ dp[i][12] の値がわかります．
以下に解答例を示します．
Listing 3 C++ での実装例
1

static const ull MOD = 1000000007LL;

2

int n;
char s[100005];
5 uint64_t dp[100005][13];
3
4

6
7

uint64_t solve () {

8

int i, j, ki;
uint64_t res = 0;

9
10
11

scanf("%s", s);

12

n = strlen(s);

13
14

dp[0][0] = 1;

15

for (i = 0; i < n; i++) {
int c;
if (s[i] == '?') c = -1;
else c = s[i] - '0';

16
17
18
19

for (j = 0; j < 10; j++) {
if (c != -1 && c != j) continue;
for (ki = 0; ki < 13; ki++) {
dp[i + 1][(ki * 10 + j) % 13] += dp[i][ki];
}
}
for (j = 0; j < 13; j++) dp[i + 1][j] %= MOD;

20
21
22
23
24
25
26
27

}

28

res = dp[n][5];

29
30

printf("%llu\n", res);

31

return 0;

32

}

4

You can build the following relation:
dp[i][j] := Thenumberofallthepossibleﬁrstidigitssuchthatremainderof13isj
If you see the dp table in an increasing order of i, by trying all the possible reaminder by 13 of the
ﬁrst i − 1 digits (j of dp[i − 1][j]) and s[i], you can determine the values of dp[i][0] ∼ dp[i][12].
The following is a sample answer.
Listing 3 An implementation example in C++
1

static const ull MOD = 1000000007LL;

2

int n;
char s[100005];
5 uint64_t dp[100005][13];
3
4

6
7

uint64_t solve () {

8

int i, j, ki;
uint64_t res = 0;

9
10
11

scanf("%s", s);

12

n = strlen(s);

13
14

dp[0][0] = 1;

15

for (i = 0; i < n; i++) {
int c;
if (s[i] == '?') c = -1;
else c = s[i] - '0';

16
17
18
19

for (j = 0; j < 10; j++) {
if (c != -1 && c != j) continue;
for (ki = 0; ki < 13; ki++) {
dp[i + 1][(ki * 10 + j) % 13] += dp[i][ki];
}
}
for (j = 0; j < 13; j++) dp[i + 1][j] %= MOD;

20
21
22
23
24
25
26
27

}

28

res = dp[n][5];

29
30

printf("%llu\n", res);

31

return 0;

32

}

11

