桁数が異なる整数同士では、桁数が多い方が大きいため、まずはちょうど N 本のマッチ棒を使って最大何
桁作れるかを求めることを考えます。ちょうど N 本使わないといけないため、貪欲に作ることはできず、動
的計画法で解くことになります。
具体的には

dp(i) := ちょうど i 本のマッチ棒を使って、条件を満たす整数を作るときの最大桁数

と定義し、これを求めます。これが求まると、答えとなる整数の桁数は dp(N ) です。これの求め方について
は後述します。
今度は、桁数が同じ整数同士の大小は辞書順となるため、できるだけ大きい数字を上位の桁に使うように
します。すなわち、一般性を失わずに A1 > A2 > ... > AM とすると、A1 を最上位の桁に使えるかを調べ、
使えるなら使う、使えないなら A2 を最上位の桁に使えるかを調べ、・・・と試していきます。ここで、整数

k を 1 桁作るのに使うマッチ棒の本数を num(k) とすると、Ai を最上位の桁に使えることを調べるには、
dp(N − num(Ai )) = dp(N ) − 1 であるかを調べればよいです。最上位の桁が決まれば、同様に、上から 2 番
目、3 番目と上位の桁から順に決めていきます。
さて、残るは dp(i) の求め方です。これは、次のように求められます。ただし、ちょうど i 本のマッチ棒を
使って条件を満たすように整数を作れない場合は dp(i) = −∞ とします。

dp(i) を求める際には、ちょうど i 本のマッチ棒を使って条件を満たす整数の最上位の桁 Aj を全探索しま
す。最上位の桁が Aj だとすると、ちょうど i − num(Aj ) 本のマッチ棒を使って作った dp(i − num(Aj )) 桁
の整数の頭に Aj を付け加えて dp(i − num(Aj )) + 1 桁の整数を作ることができます。すなわち、

dp(i) = max(dpi−num(Aj ) + 1)
j

が成り立ちます。さらに、dp(0) = 0 なので、i = 1, 2, ... と小さい順に求めていくことができます。
*1 計算量は O(N M +M logM )
このようにして解くことができ、出力桁数が N
2 以下であることに注意すれば 、

になります。
余談: 0 も作れる場合は少し複雑になりますが同じような方法で解くことができます。

*1 111 · · · 1 と出力する場合が最大です

4


