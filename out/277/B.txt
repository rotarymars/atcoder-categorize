
		公式
		
			
				B - Playing Cards Validation 解説
			
			by cn449
			
		
		
		
		
			この問題では、与えられた条件を for 文と if 文を用いて丁寧に処理すればよいですが、何点か実装に関して気を付けるとよいことがあります。

「すべての条件を満たす」の処理に関して

以下のような方針が考えられます（あくまで例であり、他の方針でも正しく動けば問題ないです）。


答えとなる変数を True で初期化して持つ。各条件に対して判定を行い、条件に反するものがあった場合その変数を False へと変更する。
各条件に対して判定を行い、条件に反するものがあった場合Noを出力しプログラムを終了する。最後まで実行された場合、Yesを出力する。


\(2\) つめの条件に関して

素直に判定を行おうとすると



あるいは



などのように多くの条件を繋いで並べるという方針が考えられますが、この方針ではタイプ量が多くなりミスが生じやすいため、別の方法により処理することを推奨します。
たとえば、C++ であれば



Python であれば



などの記述が簡潔でしょう（これに関しても当然他の楽な方針も存在します）。もちろんこれは \(1\) つめの条件に対しても使うことができます。

\(3\) つめの条件に関して

もちろん set などを用いることにより高速に判定してもよいですが、制約が小さいため単に \(2\) 重ループを回しても何の問題もないことに注意してください。本問題では実装量はさほど変わりませんが、TL に十分余裕があると考えられる場合は計算量を多少犠牲にして楽な実装をするというのも競技プログラミングの戦略の一種です。また、\(2\) 重ループを回す際には \(i\) と \(j\) の対称性より大小関係を決め打っても問題がないです。

実装例（C++）



実装例（Python）



		
		
			
				投稿日時:
				
				
			
				
				最終更新:
				
				
			
			
		
	
