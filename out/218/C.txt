
		公式
		
			
				C - Shapes 解説
			
			by kyopro_friends
			
		
		
		
		
			\(S\) と \(T\) に含まれる # の個数が異なる場合、答えは明らかに No です。そうでない場合を考えます。

\(S\) に対して \(90\) 度回転を何回行うか \(4\) 通りを全探索します。回転操作を施したあとのものを改めて \(S\) と呼ぶと、平行移動で \(S\) と \(T\) を一致させられるかどうかを判定すればよいです。

両者が一致するためには、\(S\) の最も左上のマスと \(T\) の最も左上のマスが一致することが必要であり、そのようなマスを求めることで平行移動量は一意に決まるため、平行移動により実際に一致するか判定すれば十分です。

以上により \(O(N^2)\) で求めることができました。

実装例(Python)



なお、回転回数と平行移動量を全探索し、\(S\) の各マスと \(T\) の各マスの対応を確かめるような愚直な \(O(N^4)\) の解法も、\(S\) の # のマスをリストなどで持ち、一致しないことがわかった時点で比較を打ち切ることで、\(O(N^3)\) に改善することができるため、実行時間制限に間に合わせることができます。

なお、回転回数と平行移動量を全探索し、\(S\) の各マスと \(T\) の各マスの対応を確かめるような愚直な \(O(N^4)\) の解法も、\(S\) の # のマスをリストなどで持ちシャッフルし、一致しないことがわかった時点で比較を打ち切ることで、十分高速に動作します。（expected \(O(N^2)\) に見えますが未証明です）

実装例(Python)



		
		
			
				投稿日時:
				
				
			
				
				最終更新:
				
				
			
			
		
	
