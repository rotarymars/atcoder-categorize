漸化式

問題
整数列 A は最初の K 項が与えられ、
それ以降の項は与えられた漸化式で決まる。
A の M 項目の値を求めよ。
制限
1 ≦ K ≦ 100
1 ≦ M ≦ 1,000,000,000 (=109)

そもそも漸化式とは？
数列の各項の値が、それ以前の項の値によって
決められるとき、その決め方を表す等式
例: フィボナッチ数列
Fn+2 = Fn+1 + Fn
F0 = 0
F1 = 1

漸化式
初期値

漸化式はそのまま簡単にプログラムにできる
（フィボナッチ数列の例）
# 初期値を入れる
F[0] ← 0
F[1] ← 1
!

# 漸化式に従って前から順に計算
for k = 2 to N
F[k] ← F[k-1] + F[k-2]

漸化式はそのまま簡単にプログラムにできる
（フィボナッチ数列の例）
N 項目を計算するには
# 初期値を入れる
漸化式に従った計算を
F[0] ← 0 N 回ぐらいしないといけない
F[1] ← 1
!

# 漸化式に従って前から順に計算
for k = 2 to N
F[k] ← F[k-1] + F[k-2]

漸化式
AN +K = (C1 AND AN +K 1 ) XOR · · · XOR (CK AND AN )

漸化式
AN +K = (C1 AND AN +K 1 ) XOR · · · XOR (CK AND AN )
!

長いので、AND と XOR をこう書き換えます↓
AN +K = (C1 · AN +K 1 )

···

(CK · AN )

漸化式
AN +K = (C1 · AN +K 1 )

···

(CK · AN )

漸化式に従って次の項を計算するときに
AND や XOR を K 回ぐらい計算する必要がある

漸化式
AN +K = (C1 · AN +K 1 )

···

(CK · AN )

漸化式に従って次の項を計算するときに
AND や XOR を K 回ぐらい計算する必要がある
つまり、M 項目を計算するためには
M × K (≦ 1011) 回ぐらいの計算が必要になる！
とてもじゃないけど 2 秒では……

高速に M 項目を求めるために……

高速に M 項目を求めるために……

行列

!

が使えます！
✓

1 2
3 4

◆

0
1
1 0 3
@4 1 5A
2 2 1

←こういうやつ

今回使うのは
・行列とベクトルの積
・行列と行列の積
です。

行列

積

ここで頑張って説明するよりも、
ネットにたくさんある分かりやすい解説を
見たほうがよいと思うので……

フィボナッチ数列を例にして考えます
!

Fn+2 = Fn+1 + Fn
F0 = 0

!

F1 = 1

フィボナッチ数列は Fn と Fn+1 の
2 個だけわかっていれば、Fn+2 の値もわかる！

はじめは F0, F1 の値を知っている

はじめは F0, F1 の値を知っている
→ F2 が計算できるので、F1, F2 の値がわかる

はじめは F0, F1 の値を知っている
→ F2 が計算できるので、F1, F2 の値がわかる
→ F3 が計算できるので、F2, F3 の値がわかる

はじめは F0, F1 の値を知っている
→ F2 が計算できるので、F1, F2 の値がわかる
→ F3 が計算できるので、F2, F3 の値がわかる
→ F4 が……

はじめは F0, F1 の値を知っている
→ F2 が計算できるので、F1, F2 の値がわかる
→ F3 が計算できるので、F2, F3 の値がわかる
→ F4 が……
漸化式の計算を 2 個まとまりで考えよう
✓ ◆
✓ ◆
✓ ◆
✓ ◆
F1
F2
F3
F4
……
F0
F1
F2
F3

!

✓

Fn+1
Fn

◆

✓

Fn+2
Fn+1

◆

この矢印は結局何をしているのか？

!

✓

Fn+1
Fn

◆

✓

Fn+2
Fn+1

◆

この矢印は結局何をしているのか？

実は、行列を掛けている！
✓
◆✓
◆ ✓
◆ ✓
◆
1 1
Fn+1
Fn+1 + Fn
Fn+2
=
=
1 0
Fn
Fn+1
Fn+1

!

✓

1 1
1 0

◆

この行列を 1 回かけると、添字が 1 つ進む

!

✓

1 1
1 0

◆

この行列を 1 回かけると、添字が 1 つ進む
なら、n 回かけると、添字が n 進む！！
✓
◆ ✓
◆✓
◆
✓
◆✓ ◆
Fn+1
1 1
1 1
1 1
F1
=
···
Fn
1 0
1 0
1 0
F0
n個

Fn を求めるためには
!

✓

1
1

◆n
1
0

を計算すればいい（行列の累乗）ことが分かった
普通だと行列の掛け算を n 回しないといけない
＝全然早くなってない！

ある行列 A の n 乗を求めたいとする
（例として n = 100 の場合を考える）
A100

100 を 2 進数で表すと 1100100 になる
!

A100

=

100

=

!

64

32

16

8

つまり 100 = 64 + 32 + 4 と書ける

4

2

1

A100 = A64 A32 A4 と同じように分解できる！
!

A100

=

A64 A32 A16

A8

A4

A2

A1

100

=

64

8

4

2

1

!

32

16

A の (2 の累乗) 乗が求められればよさそう

これは A を次々に 2 乗していけば計算できる
2乗

!

2乗

2乗

2乗

2乗

2乗

A100

=

A64 A32 A16

A8

A4

A2

A1

100

=

64

8

4

2

1

!

32

16

A を 2 乗していきながら、n のビットが立っている
場所のものだけを掛け算していけばいい！

!

2乗

!

2乗

2乗

2乗

2乗

2乗

A100

=

A64 A32 A16

A8

A4

A2

A1

100

=

64

8

4

2

1

!

32

16

必要な行列の掛け算の回数は、
n を 2 進数で表したときの桁数 = O(log n)

O(log n) 回の行列の掛け算で漸化式の
n 項目が計算できるようになった！
これを使えば D 問題が解けるのでは？

O(log n) 回の行列の掛け算で漸化式の
n 項目が計算できるようになった！
これを使えば D 問題が解けるのでは？
ん？ちょっと待てよ……

今回の漸化式
AN +K = (C1 · AN +K 1 )

···

(CK · AN )

行列の累乗では、
掛け算や足し算で表される漸化式が対象だった
→ AND や XOR はどうすればいいのか？？？

今回の漸化式
AN +K = (C1 · AN +K 1 )

···

(CK · AN )

行列の累乗では、
掛け算や足し算で表される漸化式が対象だった
→ AND や XOR はどうすればいいのか？？？

実は大丈夫！行列累乗が使える！！

・AND を掛け算のようなもの
・XOR を足し算のようなもの
と思って行列の累乗を計算すればいい！
（つまり、普通の行列の計算をするときの + を XOR
に置き換えて、× を AND に置き換える）

・AND を掛け算のようなもの
・XOR を足し算のようなもの
と思って行列の累乗を計算すればいい！
（つまり、普通の行列の計算をするときの + を AND
に置き換えて、× を XOR に置き換える）
なんでそんなことをしても大丈夫なの？
「掛け算のようなもの」ってどういうこと？

行列の要素は必ずしも
・普通の数
・普通の足し算
・普通の掛け算
である必要はない！
とはいえ、足し算や掛け算のかわりに
何でも好きな演算をいれていいわけでもない。
足し算と掛け算っぽいものじゃないとダメ

足し算と掛け算っぽさとは……？
・足し算ならこれが成り立ってほしいよね
・掛け算ならこれが成り立ってほしいよね
という性質。
今からその性質を挙げますが、結構数が多いので
覚えるというよりは「こういう感じなのかー」と
理解してもらえればいいと思います。

以下の性質を満たしていれば行列積ができる！
a + (b + c) = (a + b) + c
a+0=0+a=a
a+b=b+a
a ⇥ (b ⇥ c) = (a ⇥ b) ⇥ c
a⇥1=1⇥a=1
a ⇥ (b + c) = (a ⇥ b) + (a ⇥ c)
(a + b) ⇥ c = (a ⇥ c) + (b ⇥ c)
a⇥0=0⇥a=0

以下の性質を満たしていれば行列積ができる！
a + (b + c) = (a + b) + c
a+0=0+a=a
a+b=b+a
a ⇥ (b ⇥ c) = (a ⇥ b) ⇥ c
a⇥1=1⇥a=1
a ⇥ (b + c) = (a ⇥ b) + (a ⇥ c)
(a + b) ⇥ c = (a ⇥ c) + (b ⇥ c)
a⇥0=0⇥a=0

足し算は好きな順に
計算してもいい

以下の性質を満たしていれば行列積ができる！
a + (b + c) = (a + b) + c
a+0=0+a=a
a+b=b+a

足し算しても変わらない
ような値(0)が存在する

a ⇥ (b ⇥ c) = (a ⇥ b) ⇥ c
a⇥1=1⇥a=1
a ⇥ (b + c) = (a ⇥ b) + (a ⇥ c)
(a + b) ⇥ c = (a ⇥ c) + (b ⇥ c)
a⇥0=0⇥a=0

以下の性質を満たしていれば行列積ができる！
a + (b + c) = (a + b) + c
a+0=0+a=a
a+b=b+a

足し算は左右を
入れ替えても結果が同じ

a ⇥ (b ⇥ c) = (a ⇥ b) ⇥ c
a⇥1=1⇥a=1
a ⇥ (b + c) = (a ⇥ b) + (a ⇥ c)
(a + b) ⇥ c = (a ⇥ c) + (b ⇥ c)
a⇥0=0⇥a=0

以下の性質を満たしていれば行列積ができる！
a + (b + c) = (a + b) + c
a+0=0+a=a
a+b=b+a
a ⇥ (b ⇥ c) = (a ⇥ b) ⇥ c
a⇥1=1⇥a=1
a ⇥ (b + c) = (a ⇥ b) + (a ⇥ c)
(a + b) ⇥ c = (a ⇥ c) + (b ⇥ c)
a⇥0=0⇥a=0

掛け算は好きな順に
計算してもいい

以下の性質を満たしていれば行列積ができる！
a + (b + c) = (a + b) + c
a+0=0+a=a
a+b=b+a
a ⇥ (b ⇥ c) = (a ⇥ b) ⇥ c
a⇥1=1⇥a=1

掛け算しても変わらない

a ⇥ (b + c) = (a ⇥ b) + (a ⇥ c)
(a + b) ⇥ c = (a ⇥ c) + (b ⇥ c)
a⇥0=0⇥a=0

ような値(1)がある

以下の性質を満たしていれば行列積ができる！
a + (b + c) = (a + b) + c
a+0=0+a=a
a+b=b+a
a ⇥ (b ⇥ c) = (a ⇥ b) ⇥ c
a⇥1=1⇥a=1
a ⇥ (b + c) = (a ⇥ b) + (a ⇥ c)
(a + b) ⇥ c = (a ⇥ c) + (b ⇥ c)
a⇥0=0⇥a=0

足し算と掛け算の間に
分配法則がなりたつ

以下の性質を満たしていれば行列積ができる！
a + (b + c) = (a + b) + c
a+0=0+a=a
a+b=b+a
a ⇥ (b ⇥ c) = (a ⇥ b) ⇥ c
a⇥1=1⇥a=1
a ⇥ (b + c) = (a ⇥ b) + (a ⇥ c)
(a + b) ⇥ c = (a ⇥ c) + (b ⇥ c)
a⇥0=0⇥a=0

足し算しても変わらない
ような値(0)と掛け算すると
0になる

いま挙げた性質を満たすものを半環といいます。
足し算を XOR、掛け算を AND だと思っても
いま挙げた性質が全部成り立つことが確かめられる！
→行列の累乗で漸化式の計算ができる！！
実際に性質を満たすことを確かめるのは省略しますが、余裕があればトライして
みてください。
また、今回のように非負整数に対して「足し算を XOR」「掛け算を AND」とす
れば性質を満たすことを「非負整数は XOR と AND に関して半環をなす」と
言ったりします。

XOR, AND からなる漸化式でも行列累乗が
使えることが無事に確認できた！
あとは、今回の漸化式を進めるような行列を
実際に作って累乗すればいい！

こういう行列になります
0

C1
B1
B
B0
B
B ..
@ .
0

C2
0
1
..
.

···
···
···
..
.

CK 1
0
0
..
.

0

···

1

1

CK
0 C
C
0 C
C
.. C
. A
0

1 行目は、掛け算したときに漸化式が出てくるように
0

C1
B1
B
B0
B
B ..
@ .
0

C2
0
1
..
.

···
···
···
..
.

CK 1
0
0
..
.

0

···

1

1
1 0
CK
AN +K 1
BAN +K 2 C
0 C
C
C B
BAN +K 3 C
0 C
C・B
C
C
.. C B
..
A
. A @
.
0

→ 掛け算の結果、漸化式が出てくる
→ 結果の 1 個目が AN+K になる

AN

2 行目以降は、項をずらしていくイメージ
0

C1
B1
B
B0
B
B ..
@ .
0

C2
0
1
..
.

···
···
···
..
.

CK 1
0
0
..
.

0

···

1

1
1 0
CK
AN +K 1
BAN +K 2 C
0 C
C
C B
BAN +K 3 C
0 C
C・B
C
C
.. C B
..
A
. A @
.
0

AN

たとえば、2 行目に注目すると

掛け算の結果 2 個目には AN+K-1 が出てくる

・漸化式は行列の累乗を使って早く進められる
・足し算、掛け算のかわりに XOR, AND を使う
先ほどの行列を M-1 乗して A1 から AK までが入った
初期値のベクトルに掛け算すると AM が求まる！
行列の掛け算は定義通りに計算して O(K3) なので、
全体での計算量は O(K3 log M) になる。

どんな漸化式でも行列累乗が使えるわけではない！
2
Xn+2 = Xn+1 ⇥ Xn

以前の項どうしの間で掛け算があったりするとダメ
Xn+2 = aXn+1 + bXn

こういう (定数) (以前の項) の足し算の形ならOK
ただし、足し算や掛け算が普通のものじゃなくても
半環なら OK というのが今回のポイントだった


