まず、各辺について橋であるかを判定する事を考えます。グラフから辺を取り除いたときに、非連結
グラフとなる辺を橋と呼ぶので、この定義にそって調べていきます。したがって、各辺をグラフから
取り除いて、グラフが連結であるかを判定します。グラフの連結判定には、深さ優先探索(DFS)、
幅優先探索(BFS)、Uniou Find、ワーシャルフロイド法などが使えます。今回の問題の制約で
あれば、ここで挙げたアルゴリズムのどれを使っても、十分に間に合います。
ここでは、グラフの連結判定のためのDFSの実装について説明します。グラフの連結判定のための
DFSは、以下の擬似コードで表される再帰関数で実装することができます。

...

連結判定をする際には、全ての頂点を未訪問にしてから、任意の１つの頂点からDFSを呼びます。
その後に全ての頂点が訪問済みならば連結であり、そうでない場合は非連結です。また、グラフの
辺の繋がりは隣接行列で管理でき、隣接行列は２次元配列で実装することができます。
以上をまとめると、各辺をグラフから取り除いて、グラフが連結であるかを判定して、非連結となる
場合を数え上げます。DFSを用いた場合の時間計算量は、グラフの連結判定にO(N+M)でかかるため、
全体の時間計算量はO(M(N+M))となり間に合います。
