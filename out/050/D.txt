説明のため、and をビットごとの論理積、<< を左シフト演算、>> を右シフト演算とします。
方針としては、a と b のビットを上から決めていく桁 DP を考えます。u = a xor b としている限り、0 ≤ u
は常に成り立ちます。また、v = a + b = ((a and b) << 1) + (a xor b) = ((a and b) << 1) + u ≥ u なの
で、v ≤ N という条件のみに注意すればよいです。そこで、次のような DP を考えます。

dp[i][j] = a と b の i ビット目以上が決定していて、その段階で v = j となる通り数。
この DP では、以下の 3 パターンの遷移が考えられます。
・a の i ビット目と b の i ビット目が共に 1 の場合
・a の i ビット目と b の i ビット目のどちらか片方のみが 1 の場合
・a の i ビット目と b の i ビット目が共に 0 の場合
しかし、このままではこの DP は O(N logN ) となってとても間に合いません。そこで、この DP を少し修
正して、以下のようにしてみます。

dp[i][j] = a と b の i ビット目以上が決定していて、その段階で (v >> i) = (N >> i) − j となる通り数。
これは一見、先程より複雑になっただけで、計算量が改善していないように見えます。しかし、j ≥ 2 のパ
ターンは、その後どのように a, b のビットを選んでも、v が N を超えることが起きません。なので、それら
のパターンを全て j = 2 として扱ってよくなります。よって j の範囲は 0〜2 だけを考えればよくなり、この

DP が O(logN ) で行えるようになりました。

