
Lucas Number

リュカ数の定義 ( L0 = 2 , L1 = 1 , Li = Li−1 + Li−2 (i ≧ 2) ) に従って計算すると求まります。
ただし、答えが 32 bit に収まらない場合があるので注意してください。
# include < cstdio >
typedef long long ll ;
int N ;
ll L [87];
int main ()
{
scanf ("% d " ,& N );
L [0]=2 LL , L [1]=1 LL ;
for ( int i =2; i <= N ; i ++) L [ i ]= L [i -2]+ L [i -1];
printf ("% lld \ n " , L [ N ]);
}

1


Lucas Number

You can solve it by calculate with the definition of Lucas Number( L0 = 2 , L1 = 1 ,
Li = Li−1 + Li−2 (i ≧ 2) ).
Pay attention to the case when the answer can’t be expressed in 32 bit.
# include < cstdio >
typedef long long ll ;
int N ;
ll L [87];
int main ()
{
scanf ("% d " ,& N );
L [0]=2 LL , L [1]=1 LL ;
for ( int i =2; i <= N ; i ++) L [ i ]= L [i -2]+ L [i -1];
printf ("% lld \ n " , L [ N ]);
}

