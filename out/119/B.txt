親戚の人数が 2 人、3 人などと固定されていれば問題 A と大差ありませんが、実際の親戚の人数 N は 2
以上 10 以下と固定されておらず、それに対応するために何らかの「ループ機構」を使うことになります。そ
の代表例が for 文で、この問題でも for 文を使うのが素直でしょう。以下、プログラムで答えを求めるための
機械的な手順を述べます。
まず標準入力から N の値を読み込み、ans という値を宣言して 0 で初期化します。そして次に述べる処
理を N 回繰り返すと、最終的に ans に求めたい値が入ります。i 回目の処理 (1 ≤ i ≤ N ) は次の通りです:
「標準入力から小数 xi (整数も小数の一種と考えられる) と文字列 ui を読み込む。ui = JPY なら ans に xi
を足す。ui = BTC なら ans に xi × 380000.0 を足す」。
これを Python3 で実装したコードが以下です。

1

N = int(input())

2

rate = 380000.0

3

ans = 0.0

4

for i in range(N):

5

x, u = input().split()

6

x = float(x)

7

ans += x * rate if u == 'BTC' else x

8

print('{:.11f}'.format(ans))
なお、小数を出力する際は基本的に桁数を多めに (最低でも 10 桁) 持たせることを勧めます。言語と問題
によっては、小数を出力する際の標準の桁数に頼ると精度が足りないことがあるためです。

2

