N が小さければ、4N 通りの ACGT 文字列すべてを候補として列挙した中から数えられますが、N が最大
で 100 では絶望的です。しかし、結論から述べると、これと同等のことを短時間で行うことができます。
第三の条件「隣接する 2 文字の入れ替えを 1 回行うことで第二の条件 (部分文字列として AGC を含まない)
に違反させることはできない」を言い換えると、
「部分文字列として GAC, ACG, A?GC, AG?C のいずれも含まな
い (? は何らかの 1 文字)」となります。
よって、条件を満たす文字列を 1 文字目から順に作るとき、
「i 文字目を何にするか」の選択は、
「i − 4 文字
目以前が何であったか」を気にすることなく、i − 3, i − 2, i − 1 文字目のみを考慮して行うことができます。こ
れを元に、メモ化再帰または動的計画法により N の線形時間で解を求められます (“定数倍” は大きいです)。

1

N, MOD = int(input()), 10 ** 9 + 7

2

memo = [{} for i in range(N+1)]

3
4
5

def ok(last4):
for i in range(4):

6

t = list(last4)

7

if i >= 1:
t[i-1], t[i] = t[i], t[i-1]

8
9

if ''.join(t).count('AGC') >= 1:
return False

10
11

return True

12
13
14
15

def dfs(cur, last3):
if last3 in memo[cur]:
return memo[cur][last3]

16

if cur == N:

17

return 1

18

ret = 0

19

for c in 'ACGT':

20
21

if ok(last3 + c):
ret = (ret + dfs(cur + 1, last3[1:] + c)) % MOD

22

memo[cur][last3] = ret

23

return ret

24
25

print(dfs(0, 'TTT'))

4


