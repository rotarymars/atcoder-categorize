Q 人の人全てが整数時間に出発するので、時刻 Si − 0.5 から Ti − 0.5 までの通行止めは時刻の区間 [Si , Ti )
について通行止めされていると考えて差し支えありません (簡単のためです)。

i 番目の道路工事は、[Si , Ti ) の間、座標 Xi を通行止めにします。したがって、逆算して考えると、この通
行止めの影響を受ける可能性があるのは [Si − Xi , Ti − Xi ) の間に座標 0 を出発した人だけです (それらの時
刻以外に出発した人は、その通行止めに出くわすことは絶対にありません)。
よって、i 番目の人に対する答えは、その人が影響を受ける可能性がある道路工事を全て求め、それらの道
路工事が通行止めにする座標の内、最も小さいものです。

Q 人それぞれについて、N 個の道路工事がその人に影響するかどうかを調べてしまうと、時間計算量が
O(N Q) となってしまい間に合いません。そこで、イベントソートを利用します。具体的には、「イベントを
入れる配列」および「現時点で通行止めにされている座標を持つセット」を 1 つずつ用意し、以下の 2 種類の
イベントを定義しておきます:

1. 追加イベント (t, 1, x) - セットに x を追加する。
2. 削除イベント (t, −1, x) - セットから x を削除する。
そして、N 個の道路工事全てについて、以下のようにしてイベントを配列へ追加します:

i 番目の道路工事については、
1. 追加イベント (Si − Xi , 1, Xi )
2. 削除イベント (Ti − Xi , −1, Xi )
を配列に追加する。
配列に追加したイベントは t の値に従ってソートし、順番に処理します。i 番目の人に対して答えを求める
際は、t の値が Di 以下であるようなイベント全てを処理し終わったタイミングで、セットの最小値を調べれ
ば良いです。
こうして、O(N log N ) でイベントをソートし、各イベントについて O(log N ) でセットを処理、各 Q 人に
ついて O(log N ) で最小値を調べることができるので、全体で O((N + Q) log N ) でこの問題を解くことがで
きます。
