
		公式
		
			
				Ex - Difference of Distance 解説
			
			by yuto1115
			
		
		解説
		
		
			与えられるグラフにおいて、重みが \(n\) 以下である辺のみを残したグラフを \(G_n\) とおきます。

元のグラフにおける \(d(S_j,T_j)\) の値を \(D_j\) とします。また、元のグラフにおいて頂点 \(S_j\) と頂点 \(T_j\) を結ぶパスのうち、「パス上の辺の重みの最大値」が \(D_j\) に等しいようなパスの集合を \(\mathcal P\) とします。


\(W_{A_j} > D_j\) のとき : 任意の \(P \in \mathcal P\) について、\(P\) は辺 \(A_j\) を含まないので、辺 \(A_j\) の重みが増えても \(P\) 上の辺の重みの最大値は変わらず \(D_j\) です。したがって \(d(S_j,T_j)\) も変化しません。

\(W_{A_j} < D_j\) のとき : 辺 \(A_j\) の重みが \(1\) 増えても \(W_{A_j} \leq D_j\) であるため、任意の \(P \in \mathcal P\) について、 (\(P\) が辺 \(A_j\) を含むかどうかに関わらず) \(P\) 上の辺の重みの最大値は変わらず \(D_j\) です。したがって \(d(S_j,T_j)\) も変化しません。

\(W_{A_j} = D_j\) のとき : 辺 \(A_j\) を含まないようなパス \(P \in \mathcal P\) が存在するならば、\(P\) 上の辺の重みの最大値は変わらず \(D_j\) なので、 \(d(S_j,T_j)\) は変化しません。逆に、全ての \(P \in \mathcal P\) について \(P\) が辺 \(A_j\) を含むならば、\(d(S_j,T_j)\) の値は \(1\) 増加します。


\(W_{A_j}\) と \(D_j\) の大小関係については、\(G_{W_{A_j}}\) および \(G_{W_{A_j}-1}\) において頂点 \(S_j\) と頂点 \(T_j\) が連結であるかどうかが分かればよいので、union-find を使うことで簡単に求められます。

残る課題は、\(W_{A_j} = D_j\) を満たす各クエリについて、辺 \(A_j\) を含まないようなパス \(P \in \mathcal P\) が存在するかどうかを判定することです。ここで、「辺 \(A_j\) を含まないようなパス \(P \in \mathcal P\) が存在しない」という条件は以下のように言い換えられます。


\(G_{W_{A_j}}\) において、重みが \(W_{A_j}\) 未満の辺をすべて縮約したグラフを考える。このグラフにおいて辺 \(A_j\) は橋であり、辺 \(A_j\) を削除したときに新たにできる \(2\) つの連結成分の一方に頂点 \(S_j\) が、もう一方に頂点 \(T_j\) が含まれる。


ただし、グラフにおける橋とは、その辺を削除すると連結成分の数が増えるような辺のことを指す用語です。頂点数 \(V\)、辺数 \(E\) のグラフが与えられたとき、そのグラフ上の橋を列挙する問題は、lowlink とよばれるアルゴリズムによって \(O(V+E)\) で解くことができます。

よって、「\(G_{W_{A_j}}\) において、重みが \(W_{A_j}\) 未満の辺をすべて縮約したグラフ」において、


辺 \(A_j\) が橋であるかどうか
辺 \(A_j\) が橋であるならば、辺 \(A_j\) を削除したときに新たにできる \(2\) つの連結成分の一方に頂点 \(S_j\) が、もう一方に頂点 \(T_j\) が含まれるかどうか


を判定すればよいです。前者は lowlink で、後者は DFS-order を用いることで高速に判定可能です。よって本問題を解くことができました。計算量は、下記の実装例では \(O(N+M\alpha (N) + Q\log Q +(M+Q) \log M)\) になります。

おまけ：計算量は悪化しますが、lowlink の部分は ABC295-G と同様のアルゴリズムによって代替可能です。

実装例 (C++) :



		
		
			
				投稿日時:
				
				
			
				
				最終更新:
				
				
			
			
		
	
