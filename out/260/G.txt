
		公式
		
			
				G - Scalene Triangle Area 解説
			
			by physics0523
			
		
		
		
		
			例えば \(K=5\) である場合、一番左上にあるコマは以下の 1 の部分を守ることになります。



基本的な方針は imos法 です。
最終的に左から右へと累積和をとることにすると、以下の + の位置に \(+1\) 、 - の位置に \(-1\) を置ければよいことになります。
(この累積和をとる動作を (1) とします (実装例 res に対応します))



これを + と - に分けて取り扱うことを考えます。

+ について

上から下に累積和を取ることにすると、以下の + に \(+1\) 、 - に \(-1\) を置くことにすると、上から下に累積和を取った後に (1) において + を置きたい位置に \(+1\) が置かれることになります。
(この累積和をとる動作を (2) とします (実装例 vert に対応します))



- について

こちらは少し工夫が必要です。累積和を以下のように取ることを考えます。
\(Sum[i][j] = Sum[i][j] + Sum[i-1][j+2]\)
このようにすると、斜め方向に累積和を取ることができます。
以下の - に \(-1\) 、 + に \(+1\) を置くことにすると、斜め方向に累積和を取った後に (1) において - を置きたい位置に \(-1\) が置かれることになります。
(この累積和をとる動作を (3) とします (実装例 diag に対応します))



各マスについて + と - を配置した後 (2)(3) の累積和をとると、 (1) の累積和をとる前の配列がどうあるべきかが分かります。その後 (1) の累積和をとると全てのマスについてそのマスを守っているコマの数がいくつかが得られるので、あとはクエリごとに答えていけばよいです。

計算量は時間 \(O(N^2+Q)\) 、空間 \(O(N^2)\) です。
各段階について + や - を置く位置が盤外になる可能性もあるので、配列を十分大きく確保する必要がある点に注意してください。

実装例(C++):



		
		
			
				投稿日時:
				
				
			
				
				最終更新:
				
				
			
			
		
	
