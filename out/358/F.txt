
		公式
		
			
				F - Easiest Maze 解説
			
			by yuto1115
			
		
		解説
		
		
			解が存在するための \(K\) の条件について考えます。まず、マス \((1,M),(N,M)\) 間の最短パスの長さを考えれば、\(K\geq N\) は明らかに必要です。

更に、突然ですがグリッドの各マスを以下のように市松模様に色分けしてみます。



グリッド上のいかなるパスも赤 \(\rightarrow\) 青 \(\rightarrow\) 赤 \(\rightarrow\dots\) のように違う色のマスを交互に通ること、マス \((1,M),(N,M)\) の色が等しいか異なるかは \(N\) が奇数か偶数かによって定まることを考えると、\(N\) と \(K\) の偶奇は一致している必要があることがわかります。（例えば \(N\) が偶数のとき、マス \((1,M),(N,M)\) の色は異なるため、入口から出口までの道順は赤 \(\rightarrow\) 青 \(\rightarrow\) 赤 \(\rightarrow\) 青\(\rightarrow\dots\rightarrow\) 赤 \(\rightarrow\)青のようになり、必ず偶数個の頂点を通ります。）

逆に、\(K\geq N\) かつ \(N\) と \(K\) の偶奇が一致している場合必ず解を構築することができます。具体的には、以下の図のように、最短である長さ \(N\) のパスから始めて \(N,N+2,N+4,\dots\) とパスの長さを \(2\) ずつ増やしていくことができます。

\(N\) が偶数のとき



\(N\) が奇数のとき



あとはこれを丁寧に実装すればよいです。ある程度の場合分けが必要になりますが、場合分けの内部で壁の配置を構築するのは大変なので、場合分け部分と壁の配置の構築を別々に行うことをお勧めします。下記の実装例では、まず入口から出口へのパスで通るマスの列を場合分けで構築したのち、一旦全ての場所に壁を建ててから、パス上で隣接するマス間の壁を取り除く、という実装方針を取っています。

実装例  (C++) :



		
		
			
				投稿日時:
				
				
			
				
				最終更新:
				
				
			
			
		
	
