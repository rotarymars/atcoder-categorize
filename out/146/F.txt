’1’ から成る連続した M マスの区間が存在するときは, 答えは明らかに −1 です.
また, そのような区間が存在しないときは, 高橋君がゴールに到達することは可能です.
以下では, そのような区間が存在しない場合のみ考えます.
この双六において, 移動出来るマスの関係をグラフで表すことを考えます. このとき, この双六は

N + 1 頂点で, Si = 0 となるような頂点 i から, 頂点 i + 1, i + 2, ..., min (i + M, N + 1) に有向辺が
張られたグラフと見なすことが出来ます.
このグラフ上で, 「各頂点からゴールまで最短何手でゴール出来るか」を求めます. これは, 逆辺を
張ったグラフ上で頂点 N + 1 からの最短路問題を解くことに等しいです.
グラフ上の辺が多い為, 有名な最短路問題アルゴリズム (ダイクストラ法等) では実行時間制限に間に
合いませんが, グラフの特殊な形状に着目すると, 区間最小値を求めるデータ構造を使えば良いことが
分かります.
或いは, このグラフの特殊な形状により, (Si = 1 となる頂点を無視すれば) 前述の値が頂点番号に対
して単調減少になることを利用すると, 「頂点 N + 1 までの最短路の長さが x であるような頂点の
うち, 最も頂点番号が小さいもの」を各 x について記録すれば, 頂点番号を降順に走査するだけで簡
単に前述の値を求めることが出来ます.
以上の値を求めることが出来れば, あとは頂点 1 から順に, 頂点 N + 1 までの最短路の長さが減少す
るような頂点のうち頂点番号が最も小さいものへ進むことを繰り返せば良いです.
最短路の長さが減少しないような頂点へ移動するとゴールまでの手数が最小とはなりません. また, 頂
点番号が最小ではない頂点へ移動してもゴールまでの手数は変わりませんが, 出目を並べた数列の辞
書式順序が大きくなります.

C++ による解答例:https://atcoder.jp/contests/abc146/submissions/8592598

6

If there exists a segment of cells consisting from ’1’ of length M , then the answer is obviously
−1.
On the other hand, if there does not exist such a segment, then it is possible for Takahashi to
reach the goal.
Hereafter we will assume that there does not exist such a segment.
Let’s think of representing the available moves in this Sugoroku with a graph. Then we can
regard this Sugoroku as a graph of N + 1 vertices, which has a directed edge from every vertex
i such that Si to vertices i + 1, i + 2, ..., min (i + M, N + 1).
In this graph, let’s ﬁnd ”how many moves are needed to reach the goal from each vertices.” This
is equivalent to solving shortest path problem on the graph whose vertices are all reversed.
Since there are so many edges, famous shortest-path-ﬁnding algorithms won’t ﬁnish in time, but
due to the special pattern of the graph, it appears that you can use a data structure of ﬁnding
minimum value in the segment.
Or, due to the special pattern of the graph, the values mentioned above is in strictly decreasing
order by the indices of the vertices (except for such vertices that Si = 1), so you can ﬁnd the
value mentioned above easily by iterating through the vertices in the decreasing order of their
indices, while recording ”the vertex having the minimum index among such vertices that the
length of the shortest path to the vertex N + 1 is x” for each x.
Now that you obtained the values mentioned above, all you have to do is move to the vertex with
the smallest index among such vertices that length of shortest path to vertex N + 1 decreases,
one after another from vertex 1.
If you move to the vertex such that length of shortest path does not decrease, then the number
of moves will not be minimized. If you move to the vertex such that its index is not smallest
possible, the number of moves needed does not change, but the sequence of numbers coming up
in the roulette will be lexicographically older.
Sample code in C++:https://atcoder.jp/contests/abc146/submissions/8592598

12


