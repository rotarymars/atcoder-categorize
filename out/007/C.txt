
2014/4/19

©AtCoder Inc. All rights reserved.

14


• 迷路とスタートとゴールが与えられる
• 上下左右に移動できるのでスタート-ゴール間の最
短距離を求めよ

2014/4/19

15


• 問題文に掛かれている通りに実装しよう！

2014/4/19

16


• 実装Q&A
– 上下左右に移動するのが面倒です！
• こんな実装をしてあげよう！
– int[] vx = { 0, 1, 0, -1};
– Int[] vy = { 1, 0, -1, 0};
– for(int i=0;i<4;i++) {
» int ny = y + vy;
» int nx = x + vx[i];
» …

• このように、配列を使ってあげることによって、forループで纏めて
処理することが出来ます！

2014/4/19

17


• 実装Q&A
– キューって何？
• データの出し入れが出来るデータ構造です。
• 先に入れたデータが先に出てきます。

– 具体的にはこんな感じ
• １を入れる
• ２を入れる
• 数字を取り出す → １が出てくる
• ３を入れる
• ４を入れる
• 数字を取り出す → ２が出てくる

– こんな感じで、データをどんどん入れて、取り出す処理を行うと、
順番に取り出せる！
2014/4/19

18


• 実装Q&A
– 僕の言語にもキューって実装されてるの？
• 大抵の言語にあります！
• C++なら#include<queue>すれば、queueが。
• JavaならJava.utilにQueueが。
• C#なら、System.Collection.GenericsにQueueが。
• 他の言語にもきっとあります！

– なかったら自分で実装しましょう！
• 配列で出来ます！
– 頭から順番に詰めていって、頭から取り出すだけ。
– 長い配列と、頭の場所を表す整数、最後尾の場所を表す整数、の３
つが必要

• リストでも出来ます！
2014/4/19

19


• 実装Q&A
– 場所のデータをどうやってキューに入れるの？
• 方法は２通り
• X,Yの両方のデータが持てるデータ構造を使う
– PairやTupleなど、複数のデータを入れられるものを使う
– 構造体やclassを自分で作って入れる

• 整数に押し込んでしまう。
– X * 1000 + Yなどを入れる。
– X = A / 1000; Y = A % 1000;などで取り出す。
» オーバーフローしないかどうかに注意！
» 速度がどうしても欲しい時や、メモリ消費量を抑えたい時用。競技プロ
グラミング以外では、必要な時以外は使わないように！

2014/4/19

20


• 問題文に載っている幅優先探索を行えばよい
• キューを用いず、全てのマスに書かれている数字を
更新操作の度に確認しても今回は間に合う
• 最短手数が1000手を超える盤面も存在することに
注意せよ
• キューは自前で実装してもよいですが特にC++等は
標準でqueueクラスが存在します

2014/4/19

21

