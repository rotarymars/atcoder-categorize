1. 問題概要
2. 入力

3. 処理（アルゴリズム）
4. 出力

©AtCoder Inc. All rights reserved.

30


問題概要

1. 4x4の盤面が与えられる。

2. 盤面を180度回転させて出力せよ。

©AtCoder Inc. All rights reserved.

31


問題概要

1. 4x4の盤面が与えられる。

➢ 盤面を保存する
2. 盤面を180度回転させて出力せよ。
➢ 盤面を180度回転させる

➢ 出力する

©AtCoder Inc. All rights reserved.

32


問題概要

絶望ポイントその１
• 盤面の状態ってどう保存すればいいんだ！？

絶望ポイントその２
• 180度の回転ってどうやればいいんだ！？

©AtCoder Inc. All rights reserved.

33


問題概要

絶望ポイントその１
• 盤面の状態ってどう保存すればいいんだ！？

➢ 配列を使いましょう
絶望ポイントその２
• 180度の回転ってどうやればいいんだ！？
➢ コピー用の配列を作る
➢ 元の配列を逆からコピーする
©AtCoder Inc. All rights reserved.

34


入力

まずは盤面の保存から
• 配列って何？

©AtCoder Inc. All rights reserved.

35


入力

まずは盤面の保存から
• 配列って何？

➢連続した箱

です

• 世界で最も偉大な箱かも

©AtCoder Inc. All rights reserved.

36


入力

まずは盤面の保存から
• 配列って何？
1つだけだと変数
連続してたら配列

©AtCoder Inc. All rights reserved.

37


入力

まずは盤面の保存から
• どこが偉大なの？

縦に並べることができる
➢ これで盤面が作れる！

©AtCoder Inc. All rights reserved.

38


入力

まずは盤面の保存から
• 配列の概念はわかったけど、何をすればいい

の？

©AtCoder Inc. All rights reserved.

39


入力

まずは盤面の保存から
• 配列の概念はわかったけど、何をすればいい

の？

➢宣言

して下さい

©AtCoder Inc. All rights reserved.

40


入力

2次元配列の宣言
• C/C++

char board[4][4];
• Java

char[][] board = new char[4][4];
• C#

char[,] board = new[4, 4];
©AtCoder Inc. All rights reserved.

41

補足（配列のアクセス方法）


char array [4];

1

array という配列を宣言する

2

a

#

z

%

すでに文字が格納されているとする

3

a

#

z

%

array[0]のようにしてアクセスできる

array[0]
array[2]
array[1]
array[3]

0から始まることに注意！

©AtCoder Inc. All rights reserved.

42


補足（配列のアクセス方法２）

char board[2][2];
board

boardという2次元配列を宣言する

a
board

z

#
%

同様に、何らかの文字が入っているとする

board[0][0]

a

#

board[0][1]

board[1][0]

z

%

board[1][1]

board[0][0]には ’a’
board[0][1]には ’#’
board[1][0]には ’z’
board[1][1]には ’%’

©AtCoder Inc. All rights reserved.

43


処理（アルゴリズム）

180度の回転ってどうするの？

➢ コピー用の配列を用意します。
◆

char copy[4][4]; を宣言しておきます。

➢ 元の配列を逆からコピー用の配列に移します。

◆ for文を使います。

©AtCoder Inc. All rights reserved.

44


処理（アルゴリズム）

コーディングに入る前に、いまからすることを図
示します。
1. コピー用の配列を宣言します。

char copy[4][4];

©AtCoder Inc. All rights reserved.

45


処理（アルゴリズム）

2.元の配列を逆からコピー用の配列に移します。

x

x

x

x

x

x

x

x

x

x

x

x

x

x

x

x

O

board

copy
©AtCoder Inc. All rights reserved.

46


処理（アルゴリズム）

2.元の配列を逆からコピー用の配列に移します。

x

x

x

x

x

x

x

x

x

x

x

x

x

x

x

x

O

board

x

copy
©AtCoder Inc. All rights reserved.

47


処理（アルゴリズム）

2.元の配列を逆からコピー用の配列に移します。

x

x

x

x

x

x

x

x

x

x

x

x

x

x

x

x

O

board

x

x

copy
©AtCoder Inc. All rights reserved.

48


処理（アルゴリズム）

途中を省略して…

©AtCoder Inc. All rights reserved.

49


処理（アルゴリズム）

2.元の配列を逆からコピー用の配列に移します。

x

x

x

x

x

x

x

x

x

x

x

x

x

x

x

x

x

x

x

x

x

x

x

x

x

x

x

x

x

x

O

board

copy
©AtCoder Inc. All rights reserved.

50


処理（アルゴリズム）

2.元の配列を逆からコピー用の配列に移します。

x

x

x

O

x

x

x

x

x

x

x

x

x

x

x

x

x

x

x

x

x

x

board

x

x

x

x

x

x

x

x

x

O

copy
©AtCoder Inc. All rights reserved.

51

•

処理（アルゴリズム）

移せばよいことはわかったけど、実際にどうするの？
➢ for文を使います。
➢ for文とは繰り返し行われる処理を記述するものです。

•

復習

➢ 2次元配列の添字について

©AtCoder Inc. All rights reserved.

52


処理（アルゴリズム）

• 2次元配列の添字について

[0,0] [0,1] [0,2] [0,3]
[1,0] [1,1] [1,2] [1,3]
[2,0] [2,1] [2,2] [2,3]
[3,0] [3,1] [3,2] [3,3]
©AtCoder Inc. All rights reserved.

•

注意点

➢ 数学のxy座標とは
異なる
➢ マスは4x4だが、添
字は[3,3]まで

53

•

処理（アルゴリズム）

for文のコード

for(int i = 0; i < 4; i++){
for(int j = 0; j < 4; j++){
copy[i][j] = board[3-i][3-j];
}
}

©AtCoder Inc. All rights reserved.

54


for文のコード(i = 0, j = 0のとき)

copy[0][0] = board[3-0][3-0];
O

x

x

x

x

x

x

x

x

x

x

x

x

x

x

x

x

•

処理（アルゴリズム）

copy

board
©AtCoder Inc. All rights reserved.

55


for文のコード(i = 0, j = 1のとき)

copy[0][1] = board[3-0][3-1];
O

x

x

x

x

x

x

x

x

x

x

x

x

x

x

x

x

•

処理（アルゴリズム）

board

x

copy
©AtCoder Inc. All rights reserved.

56


for文のコード(i = 0, j = 2のとき)

copy[0][2] = board[3-0][3-2];
O

x

x

x

x

x

x

x

x

x

x

x

x

x

x

x

x

•

処理（アルゴリズム）

board

x

x

copy
©AtCoder Inc. All rights reserved.

57


処理（アルゴリズム）

途中を省略して…

©AtCoder Inc. All rights reserved.

58


for文のコード(i = 3, j = 2のとき)

copy[3][2] = board[3-3][3-2];

x

x

x

x

x

x

x

x

x

x

x

x

x

x

x

x

x

x

x

x

x

x

x

x

x

x

x

x

x

O

x

•

処理（アルゴリズム）

board

copy
©AtCoder Inc. All rights reserved.

59


for文のコード(i = 3, j = 3のとき)

copy[3][3] = board[3-3][3-3];

x

x

x

x

O

x

x

x

x

x

x

x

x

x

x

x

x

x

x

x

x

x

x

board

x

x

x

x

x

x

x

O

x

•

処理（アルゴリズム）

copy
©AtCoder Inc. All rights reserved.

60


出力

3.180度回転させたものを順に出力するだけ
➢ これもforを使って書いて下さい。
x

x

x

x

x

x

x

x

x

x

x

O

x

x

x

x

copy
©AtCoder Inc. All rights reserved.

61

x


処理（アルゴリズム）

途中を省略して…

©AtCoder Inc. All rights reserved.

62


出力

3.180度回転させたものを順に出力するだけ

x

x

x

x

x

x

x

x

x

x

x

O

x

x

x

x

x

x

x

x

x

x

x

x

x

x

x

x

O

x

x

copy
©AtCoder Inc. All rights reserved.

63

x

