D が全ての i について |X − xi | の約数であるとき、全ての都市を訪れることができます。逆に、D が
|X − xi | の約数でないような i が存在するとき、操作によって現在居る座標を D で割った余りが変化しない
ことから、|X − xi | を D で割った余りが |X − xi | または D − |X − xi | となり、0 になることがないため、
座標 xi を訪れることができません。
したがって、|X − x1 |, |X − x2 |, ..., |X − xN | 全ての約数であって最大の正整数 D を求めれば良いことに
なります。このような D は最大公約数と定義され、ユークリッドの互除法により高速に計算できることが知
られています。ユークリッドの互除法とは、

{
gcd(a, b) =

gcd(b, a mod b) if b > 0
a
if b = 0

が成り立ち、これに従って計算するアルゴリズムのことです。ここで、gcd(a, b) は a と b の最大公約数
表し、a mod b は a を b で割った余りを表します。ユークリッドの互除法は a ≤ b のとき 1 回の反復で

a mod b < a2 となることから O(log max(a, b)) で求まります。ちなみに、a, b がフィボナッチ数のときに遅
くなりますが log で求まることには変わりありません。gcd(a, b, c) = gcd(gcd(a, b), c) なので、答えである

gcd(|X − x1 |, |X − x2 |, ..., |X − xN |) を O(N log max{|X − x1 |, |X − x2 |, ..., |X − xN |}) で求められます。

5

