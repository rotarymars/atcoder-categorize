
		公式
		
			
				C - Adjacent Swaps 解説
			
			by  m_99
			
		
		
		
		
			
基本方針

基本的には各位置のボールに書かれている整数が何かに注目して操作をシミュレーションし、最終的な並びを求めることになります。
左から \(i\) 番目のボールに書かれている整数を表す変数を \(val[i]\) とします。


初め、左から \(i(1 \leq i \leq N)\) 番目のボールには整数 \(i\) が書かれています。


という記述に従い、\(val\) は次のように初期化を行います。



そして、\(Q\) 回の操作は以下のようにしてシミュレーション出来ます。



しかし、このシミュレーションの時間計算量は \(\mathrm{O}(NQ)\) であり、本問の制約の下で実行時間制限に間に合わせるには改善が必要です。

\(\mathrm{O}(Q)\) への改善

上のコードでは \(Q\) 回のループ内で \(val[j]=x[i]\) となる \(j\) を \(\mathrm{O}(N)\) かけて求めていますが、整数 \(j\) が書かれているボールが左から何番目かを表す変数 \(pos[j]\) を管理することでこの部分を \(\mathrm{O}(1)\) に出来、十分高速に本問を解くことが出来ます。

実装例



		
		
			
				投稿日時:
				
				
			
				
				最終更新:
				
				
			
			
		
	
