
		公式
		
			
				F - Monochromatic Path 解説
			
			by leaf1415
			
		
		
		
		
			以下では、\((1, 1)\) から \((H, W)\) へ白いマスのみからなる移動経路を作る最小費用を求めます。
黒いマスのみからなる場合の最小費用も同様の方法で求めることができるので、両者の最小値を本問題の答えとして出力すれば良いです。

まず、操作を複数回行う場合、その順番は結果に影響しません。
また、同じ行（または列）に対して操作を \(2\) 回行うと、その行（または列）の状態は元に戻ります。
よって、私たちが実際に決定するのは、各行と各列について「操作を \(0\) 回行うか \(1\) 回行うか」です。
実は、\(1\) 行目を反転するかを決め、通りたい移動経路 \(1\) つを選ぶと、選んだ経路のすべてのマスを白色にするためにはどの行および列を反転しなければならないかが一意に定まります。

実際にマス \((1, 1)\) から \(1\) マスずつ移動しながら、白いマスのみからなる移動経路を \(1\) つ作ることを考えます。その過程では、反転しなければならないことが確定した行および列を随時反転していきます。
具体的には以下の手順を考えます。


まず、\(R_1\) 円払って \(1\) 行目を反転しても良い。
その後、\((1, 1)\) の現在の色が黒なら、\(C_1\) 円払って \(1\) 列目を反転する。
次に、マス \((1, 1)\) に立ち、次に進む方向として、右または下の好きな向きを向く。
以降、\((H, W)\) に到達するまで以下を繰り返す。


現在いるマスを \((i, j)\) とし、現在向いている向きに \(1\) マス進んだ先のマスを \((i', j')\) とする。
\((i', j')\) の現在の色が黒ならば、


現在下を向いているなら \(R_{i'}\) 円払って \(i'\) 行目を反転する。
現在右を向いているなら \(C_{j'}\) 円払って \(j'\) 列目を反転する。

\((i, j)\) から \((i', j')\) に移動し、次に進む方向として、右または下の好きな向きを向く。



白いマスのみからなる移動経路を作る最小費用を求めるには、
上記の手順でマス \((H, W)\) に到達までにかかる最小費用を求めれば良いです。
これを動的計画法（ DP ）によって求めます。

DP の状態としては、現在いるマス \((i, j)\) と現在の向き \(d\) に加え、
上記の手順 2. で「 \((i', j')\) の現在の色」を取得するための情報が必要です。\((i', j')\) は以前に行われた \(i'\) 行目または \(j'\) 列目への操作によって、初期状態と比べて色が反転している可能性があります。
\((i', j')\) がすでに反転されているかを知るには、現在向いている行（または列）（すなわち、いま右を向いているなら \(i\) 行目、現在下を向いているなら \(j\) 列目）に対して今までに反転操作を行っているかわかれば十分です。
以上を踏まえて、下記のDP テーブルによる DP を行います。


\(\mathrm{dp}[i][j][d][l] := \)（現在マス \((i, j)\) に \(d (=\) 右 or 下 \()\)の向きで立っており、現在向いている行（または列）に対して \(l (=0\) or \(1)\) 回の操作を行っているときの、現在までにかかった合計費用としてあり得る最小値）


各状態からは、現在の向きに \(1\) マス進んだ後つぎにどちらの向きを向くかという \(2\) つの選択肢に対応した \(2\) 本の遷移を行えば良いです。

以下に、C++ 言語による正解例を記載します。



		
		
			
				投稿日時:
				
				
			
				
				最終更新:
				
				
			
			
		
	
