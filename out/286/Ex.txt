
		公式
		
			
				Ex - Don't Swim 解説
			
			by nok0
			
		
		
		
		
			線分 \(S-T\) が \(C\) と交点を持たないとき、明らかに答えは \(S-T\) の距離と一致します。以下そうでないときを考えます。

そのような場合、 移動は以下の方法しか考えなくてよいです。


\(S\) から \(C\) 上のある頂点 \(x\) に直線で移動 \(\to\) \(C\) 上のある頂点 \(x\) から \(C\) 上の別のある頂点 \(y\) まで \(C\) の周上を通って移動 \(\to\) \(C\) 上の別のある頂点 \(y\) から \(T\) に直線で移動


正当性は、それ以外の経路を考えたときに上記の方法に変化させることで距離が短くなることから従います。

さらに、このような頂点 \(x,y\) の候補としてはできる限りぎりぎりのところ（すなわち、 \(S\) から \(x\) に直線で移動する際には \(C\) の内部を通らないが、\(S\) から \(x\) に \(C\) で隣接する頂点の一方 \(x'\) に直線で移動する際には \(C\) の内部を通ってしまう、\(y\) についても同様）のみを考えて損をしません。この正当性は明らかです。

このようなぎりぎりの頂点 \(x,y\) の見つけ方は様々な方法が考えられますが、実装が容易なのは \(C,S,T\) の凸包を求めることでしょう。

結局、移動方法としては \(C,S,T\) の凸包をとり、その周上を移動するもののみ考えればよいです。 時計回りと反時計回りを試し、小さいほうが答えとなります。このアルゴリズムは \(O(N)\) で動作します。

実装例(c++):



		
		
			
				投稿日時:
				
				
			
				
				最終更新:
				
				
			
			
		
	
