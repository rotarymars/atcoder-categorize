まず、
「カード i が必要」という条件は次のように言い換えられます: 「カード i を使わずに、総和が K − ai
以上 K 未満な集合が取れる」.

1

左 ⇒ 右 ・・・ 必要ならその証拠となる i を含むよい集合があって、これから i を除いたものが言い換え後
の条件を満たす証拠になっています。
右 ⇒ 左 ・・・ 上とは逆に、この条件を満たす集合に i を加えたものが元の条件を満たす証拠となってい
ます。
よって、各カード i ごとに、そのカードを除いた後つぎのような DP をします。
「dp[x][y] = x 枚目まで使ったときに総和を y にできるか?」

y としては K 未満しか考えなくて良いため、この DP の計算量は O(N K) になります。これを N 枚のカー
ドに対してやるので、全体の計算量は O(N 2 K) となり、部分点を取ることが出来ます。
満点解法を取るにはいくつか方法があります。ひとつは、カード i が不必要な時、ai ≥ aj を満たすカード

j も不必要である (つまり、単調性が成り立つ) ことを利用する方法で、どのカードまで不必要かを二分探索す
ることで、上述の dp の回数を O(logN ) 回に減らせるので、全体で O(N KlogN ) になります。
他の方法として、dp を, カード 1,2,..,N の順に使う方と N ,N − 1,...,1 の順に使う方の両方を途中経過を残
して計算しておいて、その結果を利用することで各 i について O(K) で判定する方法があります。実際、カー
ド i について判定するには、1,2,...,i − 1 を使って出来る値の集合と、N ,N − 1,..,i + 1 を使ってできる値の集
合がわかっていれば良いです。これがわかっているので、あとは累積和を使ったりすると O(K) で判定でき
て、全体の計算量は O(N K) になります。
また、bitset 等を使うことで DP を高速化すると計算量は変わらなくても少し遅い解法でも通るかもしれま
せん。

The card ai is unnecessary if there is a subset of the other N − 1 cards whose sum is in the interval
[K − ai , K). Thus, the straightforward DP is O(N 3 ).
There are two ways to improve it:
• O(N 2 logN ): It turns out that if ap < aq and aq is unnecessary, ap is also unnecessary. Do binary
search using this fact.
• O(N 2 ): Do DP twice: for prefixes and for suﬃxes.
Also, it can be 64 times faster if you use bitset.

2

