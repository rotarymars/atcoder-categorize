K = 0 の場合、最小の操作回数は

∑N −1
i=0

max(0, Hi+1 − Hi ) (ただし H0 = 0 とする) になりま

す。このことを示します。まず、行ごとに分けて考えたとき、i 列目では白だが i + 1 列目では黒で
塗られる予定であるような i と同じ数だけ操作が必要になります。そして、列ごとにその列番号が先
程の条件を満たす i になる行数を考えると、max(0, Hi+1 − Hi ) であることがわかります。最後に、
これらを合計することで元の式が得られます。

K > 0 の場合を考えます。列の H の値を変更する際にはいつも変更するものの左隣の値と同じに
なるようにすることで、実質的にその列が存在しないものとして見なすことができることがわかりま
す。この方法は明らかに最適です。
よって、この問題は以下のように言い換えられます。

長 さ N の 数 列 H1 , H2 , . . . , HN が 与 え ら れ る の で 、K つ の 項 を 削 除 し た と き

∑N −K−1
i=0

max(0, Hi+1 − Hi ) の値が最小でいくつになるか求めてください。ただし、H0 =

0 とします。

この問題は、簡単な動的計画法によって O(N ) の計算量で解くことができます。DP [x][y] を、削
除しない項の集合に対して、最も右の項の番号が x、サイズが y であるときのコストの最小値としま
す。遷移式を DP [x][y] = minx−1
i=1 {DP [i][y − 1] + max(0, Hx − Hi )} として順次求めることができ
ます。minN
i=1 {DP [i][N − K]} が答えです。

BIT を用いて動的計画法を高速化することで O(N 2 logN ) の計算量で解くこともできます。

6

If K = 0, we claim that the minimum number of operations is

∑N −1
i=0

max(0, Hi+1 −Hi ) (where

H0 = 0). Here is a proof. First, for each row, the number of operations you need is equal to
the number of i such that i-th column of the row will be painted white and i + 1-th onewill be
painted black. Then, for each column, consider the number of row such that its index satisﬁes
the condition mentioned above; it is equal to max(0, Hi+1 − Hi ). Finally, we can sum them up
so that we obtain the original equation.
Then let’s consider K > 0. When you change the value H of a column, you can always set the
value same to that of the column on its left, so that you can virtually ignore the column. This
is obviously optimal.
Therefore, the problem can be rephrased as follows:




You are given a sequence H1 , H2 , . . . , HN of length N . You can remove K elements from the
∑N −K−1
sequence. Find the minimum value of i=0
max(0, Hi+1 − Hi ) after removing elements.
Here, we assume that H0 = 0.



3

This problem can be solved with a simple DP in a total of O(N ) time. Let DP [x][y] be the
minimum cost when, for a set of elements that are not removed, the index of leftmost element of
the set is x and the size of the set is y. Then each value can be calculated by a recurrence relation
N
DP [x][y] = minx−1
i=1 {DP [i][y −1]+max(0, Hx −Hi )}. The answer will be mini=1 {DP [i][N −K]}.

You can optimize DP by using BIT so that it will be solved in a total of O(N 2 logN ) time.

12


