まず、高橋君が操作を行う順番は重要ではありません。

fi := ロボット i が一連の操作の中で起動されたかどうかの bool 値、gi := ロボット i が高橋君に
よって直接起動されたかどうかの bool 値と置きます。このとき、fi := gi OR fj (j ̸= i, Xj < Xi <

Xj + Dj ) と表せることがわかります。
全てのロボットが残っている場合に、ロボット i を起動した場合に連動して起動することになる最
大の j を Ri で表します。(他のロボットに関与しない場合は、Ri = i とします) このとき、

Ri = max(i, Rj (i < j, Xi + Di > Xj ))
が成り立つので、segment tree などを用いて Ri を X の大きい方から求めていけます。一部のロ
ボットが取り除かれている場合も、起動した場合に同じ範囲のロボットが取り除かれた状態になるこ
とがわかります。

dpi := ロボット i 以降のみを考慮した場合の組み合わせの個数と置きます。このとき、ロボット i
を起動しない場合... dpi+1 、ロボット i を起動する場合 ... dpRi +1 となり、X の大きい方から求ま
ります。
以上の計算量は O(N logN ) です。

6

First, the order of Takahashi’s operations are not important.
Let fi := a boolean value whether robot i was activated in the series of operations, and gi :=
a boolean value whether robot i was directly activated by Takahashi. Then, it can be seen that
fi := gi OR fj (j ̸= i, Xj < Xi < Xj + Dj ).
Let Ri be the maximum j such that, when robot i is activated when all the robots are remaining,
robot j is accordingly activated. (If it does not contribute to other robots, then let Ri = i.) Then,
it holds that
Ri = max(i, Rj (i < j, Xi + Di > Xj )),
so, by using data structures like segment tree, Ri can be calculated in the decreasing order of
X. Even when some robots are removed, the robots in the same range will be removed when it’s
activated.
Let dpi := the number of possible sets of robots, when considering only robot i and later.
Then, if robot i is not activated... dpi+1 , and if robot i is activated... dpRi +1 , and these can be
calculated in the decreasing order of X.
The time complexity above is O(N logN ) in total.

12


