p(1 ≦ a ≦ N ) 種類のネタを選んだ時の「おいしさ基礎点」の最⼤値を f (p) と定義します。(そ
のように選べないときは、−inf とします。)
また、g(p) = f (p) + p ∗ p と定義します。(1 ≦ p ≦ N ) において、g(p) の最⼤値を求めればいいこ
とになります。
まず、寿司を「おいしさ」で降順にソートします。ここから貪欲に (「おいしさ」が⼤きい順に)K
個寿司を選び、その集合を S とします。S の「ネタ」の種類数が x の時、S の「おいしさ基礎点」
の和が、f (x) となります。
明らかに f (i) < f (x)(i < x) なので、g(i) < g(x)(i < x) となり、i < x の場合は考えなくても
良いことが分かります。
次に、f (a) とそれを構成する寿司の集合の⼀つ Sa が分かっている場合に、f (a + 1) とそれを構
成する寿司の集合の⼀つ Sa+1 を求めることを考えます。(x ≦ a ≦ N − 1)

Sa+1 は、Sa に以下の操作を加えることで構成することができます。
1. 集合 Sa から、取り除いても「ネタ」の種類数が減らない寿司の中で最も「おいしさ」の⼩
さいものを取り除く。

2. 集合 Sa に含まれない寿司の中で、集合 Sa にない「ネタ」を持つ、最も「おいしさ」の⼤き
いものを Sa に加える。
この操作を繰り返すことにより、
f (i)(x < i ≦ N ) を再帰的に求めることができます。priorityqueue
等の、値の挿⼊と最⼩値の取り出しを計算量 O(log|T |)(|T| は要素数) で⾏えるデータ構造を⽤い
ることで、⼀回の操作を計算量 O(logN ) で⾏えます。これを最⼤ N 回繰り返すので、O(NlogN)
で f (p)(x ≦ p ≦ N ) を求められます。
後は、g(p)(x ≦ p ≦ N ) の最⼤値を求めることで、この問題に正答することができます。

3


