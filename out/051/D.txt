
Candidates of No Shortest Paths

まず、edge(i, j) を頂点 i と j を結ぶ辺のコスト、dist(i, j) を頂点 i から頂点 j までの最短距離とします。最短
経路の候補となる辺を求めるために、全頂点間の最短経路を求める必要があります。これは、ワーシャルフロイド
法 (時間計算量 O(N 3 )) やダイクストラ法 (時間計算量 O(N M log N )) を使って求めることができます。
次に、頂点 i と頂点 j を結ぶ辺が頂点 s から頂点 t への最短経路に含まれるとき、次の式が成り立ちます。

dist(s, i) + edge(i, j) + dist(j, t) = dist(s, t)

(1)

式 (1) を満たさない場合、この辺を使った経路は頂点 s から頂点 t への最短経路とならないことが分かります。し
たがって、頂点 s, t の組を全探索を行い、式 (1) を満たす頂点 s, t の組が 1 つでもあれば、その辺はある最短経路
に含まれます。各辺に対してこのチェックを行うことにより、時間計算量 O(M N 2 ) で答えを求めることができ、
間に合います。
なお、さらに時間計算量を減らすことができます。全頂点間の最短距離が求まっているため、最短経路の判定に
式 (2) を使うことができます。

dist(s, i) + edge(i, j) = dist(s, j)

(2)

この場合、頂点 s を全探索すれば良いので、時間計算量 O(M N ) で答えを求めることができます。
また、ある頂点 s からダイクストラ法を行い、その最短経路木に含まれる辺は当然ながら最短経路に含まれま
す。全頂点を 1 回ずつ始点にしたダイクストラ法を行い、その最短経路木に含まれる辺をチェックすることでも、
答えを求めることが可能です。(証明略)

C++のコード例

1
2

int main(void){
const int inf = 100000000;
3

3
4

int n,m;

5

cin >> n >> m;

6

int a[1000],b[1000],c[1000],dist[100][100];

7
8

for(int i = 0; i < m; ++i){

9

cin >> a[i] >> b[i] >> c[i];

10

a[i]--,b[i]--;

11

}

12
13

for(int i = 0; i < n; ++i){

14

for(int j = 0; j < n; ++j){

15

if(i==j)

16

dist[i][j]=0;

17

else

18

dist[i][j]=inf;

19

}

20

}

21
22

for(int i = 0; i < m; ++i){

23
24

dist[a[i]][b[i]]=min(dist[a[i]][b[i]],c[i]);

25

dist[b[i]][a[i]]=min(dist[b[i]][a[i]],c[i]);
}

26
27

for(int k = 0; k < n; ++k){
for(int i = 0; i < n; ++i){

28
29

for(int j = 0; j < n; ++j){

30

dist[i][j]=min(dist[i][j],dist[i][k]+dist[k][j]);

31

}

32

}

33

}

34
35
36

int ans=m;

37

for(int i = 0; i < m; ++i){

38

bool shortest=false;

39

for(int j = 0; j < n; ++j) if(dist[j][a[i]]+c[i]==dist[j][b[i]]) shortest=true;

40

if(shortest==true){

41

ans=ans-1;
}

42

}

43
44

cout << ans << endl;

45
46

}

4


