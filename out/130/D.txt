D. Enough Arrays(writer : yuma000)
有り得る部分列の左端と右端を列挙して、それぞれの区間和が K 以上かを確かめる方法では、O(N 2 ) か
かってしまいます (累積和を用いることで、区間和は O(1) で求まります)。よって、もっと効率の良い解法を
見つける必要があります。

S(l, r) =

∑l

r Ak としたとき、

•

S(a, b) < S(a, b + 1)

•

S(a, b) > S(a + 1, b)

が成り立ちます。
つまり、ここから

•

ある l, r に対して、S(l, r) >= K ならば、全ての x(x >= r) に対して、S(l, x) >= K である。

といえます。つまり、部分列の左端 l を固定したとき、S(l, r) >= K を満たすような最小の r を見つける
ことができれば、部分列の左端が l の時に、条件を満たすものの個数を求めることができます。(具体的には、

N − r + 1 です。)
具体的に r を求める方法としては

•

尺取り法 (O(N))

•

二分探索 (O(NlogN))

が挙げられるので、そのどちらかで実装すればよいです (個人的には尺取り法の方が計算量も少なく、実装も
軽いと思うので、おすすめです)。
以下が、尺取り法のコードです。
1

#include<bits/stdc++.h>

2

using namespace std;

3
4
5

int main(){
int N;long long int K;

6

cin>>N>>K;

7

vector<long long int>A(N);

8

for(int i=0;i<N;++i){
cin>>A[i];

9
10

}

11

long long int answer=0;

12

long long int sum=0;

13
14

int r=0;

15

for(int l=0;l<N;++l){

16
17
18

while(sum<K){
if(r==N)break;

4

else{

19

sum+=A[r];

20

r++;

21

}

22

}

23
24

if(sum<K)break;

25

answer+=N-r+1;
sum-=A[l];

26
27

}

28

cout<<answer<<endl;

29

return 0;

30

}

