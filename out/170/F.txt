Dijkstra 法を用います。以下のようなグラフを考えます。
次のような状態量をグラフの頂点と見做します。

• 現在いるマス
• すぬけ君が東西南北のどの方向を向いているか
次のように遷移します。

• 向いている方向に 1 つ進んだマスに蓮がないなら、
「向いている方向に 1 進んだマスにいて、
向きはそのまま」という状態量に、今の状態量までの最短コストに 1/K を足したコストで
到達可能とする。

•「同じマスにいて、向きが 90 度回転した」という状態量に、今の状態量までの最短コストの
小数点以下を切り上げたコストで到達可能とする。
計算量は O(HWlog(HW)) です。

6

We will use Dijkstra’s algorithm. Consider the following graph.
We will regard the states determined by the following as vertices.
• The current square
• The direction in which Snuke is facing
It will be updated as follows.
• If there is no leaf in the square one unit ahead, then it can advance to the state where “the current
square is the square one unit ahead and the direction remains the same” by consuming 1/K cost.
• It can advance to the state where “the current square remains the same and the direction rotates
by 90 degrees” by updating the cost to the current cost, rounded up.
The total time complexity is O(HWlog(HW)).

12


