
Maximum Average Sets

まず、与えられる品物の価値を降順にソートします。これを v0 ≥ v1 ≥ · · · ≥ vN −1 とします。ここで、品物を選
ぶ個数を K に固定して考えます。このとき、選んだ品物の価値の平均の最大値にする集合は、{v0 , v1 , . . . , vK−1 }
です。また、K 個選んだときの品物の価値の平均の最大値と K + 1 個個選んだときの品物の価値の平均の最大値
の差を比較します。
K−1
K
K−1
K
K−1
∑
∑
∑
1 ∑
1 ∑
vi −
vi = (K + 1)
vi − K
vi =
(vi − vK ) ≥ 0
K i=0
K + 1 i=0
i=0
i=0
i=0

このことより、K 個選んだときの品物の価値の平均の最大値は K + 1 個個選んだときの品物の価値の平均の最
大値以上となることが分かります。したがって、A 個選んだとき品物の価値の平均の最大値が 1 行目の解答とな

3

ります。
次に、選んだ品物の平均が最大となるような品物の選び方の数を数え上げます。このとき、上位 A 個の品物の
価値 {v0 , v1 , . . . , va−1 } により数え上げの方法を場合分けします。

• v0 ̸= vA−1 の場合
この場合は品物の個数を増やしていくと、選んだ品物の平均が減少していきます。したがって、{v0 , v1 , . . . , vA−1 }
となる品物の選び方を数え上げていきます。この選び方は、v0 = vi (0 ≤ i ≤ N − 1) となる個数を X 、

v0 = vi (0 ≤ i ≤ A − 1) となる個数を Y とすると、答えは X CY 通りです。
• v0 = vA−1 の場合
この場合は品物の個数を増やした場合でも、選んだ品物の平均が最大となる場合があります。それは、選ん
だ全ての品物の価値が v0 となる場合であり、A 個から B 個までの範囲内で品物を選んだ集合を数え上げて
B
∑
いきます。したがって、v0 = vi (0 ≤ i ≤ N − 1) となる個数を X とおくと、答えは
X Ci 通りとなり
i=A

ます。

組み合わせ n Cm (0 ≤ n, m ≤ N ) はパスカルの三角形を利用することで、時間計算量 O(N 2 ) で求めることが可能
です。
以上のことから、時間計算量はソートで O(N log N )、答えの平均の計算で O(N )、パスカルの三角形による組
み合わせの前計算で O(N 2 )、答えの数え上げに O(N ) となるため、合計で O(N 2 ) となるため間に合います。
なお、階乗と階乗の逆元の前計算による時間計算量 O(N log N ) となる解法が存在します。(詳細は略)

C++のコード例 (パスカルの三角形を利用した組み合わせの前計算)

1

using ll=long long;

2

using R=double;

3
4

// Combination Table

5

ll C[51][51]; // C[n][k] -> nCk

6
7

void comb_table(int N){
for(int i=0;i<=N;++i){
for(int j=0;j<=i;++j){

8
9

if(j==0 or j==i){

10

C[i][j]=1LL;

11

}else{

12

C[i][j]=(C[i-1][j-1]+C[i-1][j]);

13

}

14

}

15

}

16
17

}

18
19

int main(void){

20

int N,A,B;

21

cin >>

N >> A >> B;

22

4

const int NMAX=50;
ll v[NMAX];

23
24
25
26

for(int i=0;i<N;++i){

27

cin >> v[i];
}

28
29
30

comb_table(N);

31

sort(v,v+N);

32

reverse(v,v+N);

33
34

R max_average=0.0;

35

for(int i=0;i<A;++i){
max_average+=v[i];

36
37

}

38

max_average/=A;

39
40

int a_th_val_num=0,a_th_val_pos=0;

41

for(int i=0;i<N;++i){

42

if(v[i]==v[A-1]){

43

a_th_val_num++;

44

if(i<A){
a_th_val_pos++;

45

}

46

}

47

}

48
49
50

ll cnt=0LL;

51

if(a_th_val_pos==A){
for(a_th_val_pos=A;a_th_val_pos<=B;++a_th_val_pos){

52

cnt+=C[a_th_val_num][a_th_val_pos];

53

}

54

}else{

55

cnt+=C[a_th_val_num][a_th_val_pos];

56

}

57
58
59

cout.precision(20);

60

cout << fixed << max_average << endl;

61

cout << cnt << endl;

62

return 0;

63
64

}

5


