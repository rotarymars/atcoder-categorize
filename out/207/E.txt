
		公式
		
			
				E - Mod i 解説
			
			by penguinman
			
		
		
		
		
			\(\text{dp}[i][j]:=(A\) の部分列 \(A'=(A_1,A_2,\ldots,A_i)\) を \(j\) 個の空でない連続した部分列に切り分ける通り数\()\) と定義した動的計画法を考えます。

遷移は以下の通りです。


\(\text{dp}[i][j]:=(k \lt i\) を満たしてかつ \(\sum_{l=k+1}^{i}A_l\) が \(j\) で割り切れるような全ての \(k\) における \(\text{dp}[k][j-1]\) の総和\()\)


上記の遷移は \(\text{sum}[0]=0,\text{sum}[i]=\text{sum}[i-1]+A_i\) を満たす配列 \(\text{sum}\) を用いて表すことも可能で、その場合以下のようになります。


\(\text{dp}[i][j]:=(k \lt i\) を満たしてかつ \(\text{sum}[i]-\text{sum}[k]\) が \(j\) で割り切れるような全ての \(k\) における \(\text{dp}[k][j-1]\) の総和\()\)


このような dp は愚直に行うと遷移に \(O(N)\) かかることから合計での計算量が \(O(N^3)\) となり、実行時間制限に間に合いません。

そこで、「\(\text{sum}[i]-\text{sum}[k]\) が \(j\) で割り切れること」と「\(\text{sum}[i]\) を \(j\) で割ったあまりと \(\text{sum}[k]\) を \(j\) で割ったあまりが等しいこと」が同値であることを利用して、各 \(i,j\ (0 \leq j \lt i \leq N)\) について「\(\text{sum}[k]\) を \(i\) で割ったあまりが \(j\) となるような全ての \(k\) における、\(\text{dp}[k][i-1]\) の総和」をメモしながら遷移してみましょう。

これにより遷移にかかる計算量が \(O(1)\) に落ち、合計での計算量が \(O(N^2)\) となるため実行時間制限に間に合わせることができます。

実装例 (Python)



以下のように、dp 配列を使い回すような実装をすることも可能です。

実装例 (C++)



		
		
			
				投稿日時:
				
				
			
				
				最終更新:
				
				
			
			
		
	
