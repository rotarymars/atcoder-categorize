阿弥陀

問題
縦線 N 本、横線 M 本のあみだくじを縦に D 個
つなげてできる巨大なあみだくじを考える。
この巨大あみだくじにおいて、それぞれの縦線から
くじを引くとどこに行き着くかを求めよ。
制限
2 ≦ N ≦ 105, 0 ≦ M ≦ 2×105
1 ≦ D ≦ 109

10点 (D = 1)
縦につなげないので、与えられたあみだくじを
そのままシミュレーションすればよい。
1 本ずつシミュレーションするより
まとめて考えたほうが楽
to = [1, 2, …, N]
for a in reversed(A):
swap(to[a], to[a - 1])

10点分の解法を使って、つなげる前のあみだくじに
ついて、何番目の縦線で終わるかを計算できる。
x 番目の縦線から始めたときに T[x] 番目の縦線で
終わることを表す配列 T を用意する。
すると、2 個あみだくじをつなげたとき
x 番目の縦線から始めると T[T[x]] 番目の縦線に着く

20点 (N ≦ 1,000, D ≦ 1,000)
10点の解法を使って T を計算したあと、各 k に対し
T[T[…(T が全部で D 個)…T[k]…]] を求める。
20点 (N ≦ 8)
(1,2,…,N) → (T[1],T[2],…,T[N]) → (T[T[1]], …
という変換は少なくとも N! 回でループするので、
最初に D を N! で割った余りをとっておく。

T[T[…(T が全部で D 個)…T[k]…]] のことを
これ以降では TD[k] と書くことにする。
目標
普通に計算するとひとつの k に対してですら
O(D) もの時間かかってしまうので、
なんとかして高速に TD[k] を計算したい。

T1[k] = T[k]
T2[k] = T1[T1[k]]
T4[k] = T2[T2[k]]
T8[k] = T4[T4[k]]
…
と計算していくと、D が 2 の累乗のときには
TD[k] を O(log D) 時間で求めることができる。

D が 2 の累乗でないときも
D の 2 進数表示を考えれば、たとえば
T100[k] = T64[T32[T4[k]]]
といった風に O(log D) で TD[k] が計算できる！
これを使えば全体で O(N log D + M) 時間となって
満点が得られる。

実は少し違ったアプローチで O(N + M) 時間の
アルゴリズムもあります。
キーワード: 置換、巡回置換、置換の積
スライド作ってる時間がなかったので

詳細については読者への練習問題とする。


