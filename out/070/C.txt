
Multiple Clocks

まず、この問題で求めたい答えを A とおくと、A は Ti (1 ≤ i ≤ N ) で割り切れる最小の正の整数です。A をシ
ミュレーションで求めようとすると、時間計算量は O(N A) となるため TLE となります。
ここで、A について詳しく考えていきます。A は Ti (1 ≤ i ≤ N ) で割り切れることから Ti (1 ≤ i ≤ N ) の公倍
数です。したがって、A は以下の式で求めることができます。

A = lcm(T1 , · · · , TN ) = lcm(T1 , lcm(T2 , · · · lcm(TN −1 , TN ) · · · ))
ここで、lcm(·) は最小公倍数を表します。

2 つの正整数の最小公倍数を直接計算することはできないため、以下の公式を利用します1 。
ab = gcd(a, b)lcm(a, b)
ここで、gcd(·) は最大公約数を表します。

2 つの正整数の最大公約数はユークリッドの互除法を利用することで計算できます。ユークリッドの互除法は以
下の再帰関数のような形で実装できます。
1: procedure GCD(a,b)
2:
3:

if b = 0 then
return a

4:

end if

5:

return GCD(b, a mod b)

6: end procedure

以上をまとめると、ユークリッドの互除法を利用して最大公約数を求め、公式を利用して最小公倍数を計算
することで A が求まります。ユークリッドの互除法の計算量は O(log (max Ti )) であり、全体の時間計算量は

O(N log (max Ti )) となるため間に合います。
なお、答えは 1018 秒以内と保証されていますが、最小公倍数の計算の仕方によっては 64 bit 整数型のオーバー
フローが発生するので、注意してください。

C++のコード例

1

using ll = long long;

2
3

ll gcd(ll a,ll b){

4

if(b == 0) return a;

5

return gcd(b,a%b);

6

}

7

ll lcm(ll a,ll b){
ll g = gcd(a,b);
9
8

return a / g * b; // Be careful not to overflow

10
11

}

12

1 3 つ以上の正整数に対しては成り立たないので注意 abc ̸= gcd(a, b, c)lcm(a, b, c)

3

int main(void) {
14
int N;
13

cin >> N;

15
16

ll ans = 1LL;

17
18

for (int i = 0; i < N; ++i) {

19
20

ll T;

21

cin >> T;

22

ans = lcm(ans, T);
}

23
24
25

cout << ans << endl;

26

return 0;

27

}

4

