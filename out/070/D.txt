
Transit Tree Path

まず、与えられたグラフの性質について考えてみます。与えられたグラフは閉路がない連結グラフであるため、
異なる任意の 2 頂点間の最短経路は 1 通りに定まります。次に、全ての質問クエリで求める最短経路は頂点 K を
経由しています。したがって、各質問クエリの答えは 頂点 xj から 頂点 K までの最短経路 + 頂点 K から 頂点

yj までの最短経路となります。このことから、頂点 K から全ての頂点への最短経路を前計算することにより、各
質問クエリを効率良く処理することが可能です。
頂点 K から全ての頂点への最短経路を前計算する方法として、頂点 K から DFS をするのが簡単です。実装と
しては、以下の再帰関数について DFS(K, −1, 0) と呼ぶことで頂点 K から全ての頂点への最短経路を前計算でき
ます。
1: procedure DFS(現在の頂点 v, v の親 p, 現在の距離 d)
2:

頂点 K から 頂点 v までの距離は d

3:

for 頂点 i: 頂点 v に隣接しているかつ未訪問 do
if i = p の場合 then

4:

continue

5:
6:

end if

7:

DFS(i, v, d+ 頂点 v と 頂点 i の間の辺のコスト)

8:

end for

9:

return

10: end procedure

また、グラフの頂点数が N ≤ 105 と大きいため、隣接行列でグラフを持つと空間計算量が O(N 2 ) となり MLE
します。そこで、隣接リストを利用して実装することにより、空間計算量が O(N ) に抑えることができます。実装
は C++のコード例を参考にしてください。
以上をまとめると、グラフを隣接リストで管理して、頂点 K から DFS をすることにより、頂点 K から全ての
頂点への最短経路を前計算します。そのあと、各質問クエリに対して、頂点 K から 頂点 xj までの最短経路と頂
点 K から 頂点 yj までの最短経路の和を出力します。この解法の時間計算量は O(N + Q) となり、十分間に合い
ます。

C++のコード例（頂点番号を 0-indexed とする）

1

using ll = long long;

2

const int limit = 100010;

3

using edge = struct {int to; ll cost;};

4

vector<edge> tree[limit];

5

ll depth[limit];

6
7

void dfs(int v, int p, ll d) {

8

depth[v] = d;

9

for (auto &e : tree[v]) {

10

if (e.to == p) continue;

11

dfs(e.to, v, d + e.cost);
}

12
13

}
5

14
15

int main(void) {

16

int n;

17

cin >> n;

18

for (int i = 0; i < n - 1; ++i) {

19
20

int a, b, c;

21

cin >> a >> b >> c;

22

a--, b--;

23

tree[a].push_back({b, c});

24

tree[b].push_back({a, c});
}

25
26
27

int q, k;

28

cin >> q >> k;

29

k--;

30
31

dfs(k, -1, 0);

32

for (int i = 0; i < q; ++i) {

33

int x, y;

34

cin >> x >> y;

35

x--, y--;

36

cout << depth[x] + depth[y] << endl;
}

37
38

return 0;

39
40

}

6


