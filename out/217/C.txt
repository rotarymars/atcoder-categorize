
		公式
		
			
				C - Inverse of Permutation 解説
			
			by  Nyaan
			
		
		
		
		
			この問題のように順列 \(P = (p_1, p_2,\dots, p_N)\) に対して \(q_{p_i} = i\) を満たす順列 \(Q = (q_1, q_2, \dots,q_N)\) のことを 逆置換 と呼びます。

逆置換を使用するアルゴリズムは実は数多くあります。 例えば \(P\) があったときに 「 \(i\) は \(P\) の中で何番目にありますか？」というクエリがたくさん飛んでくるケースを考えましょう。このとき、単純に \(P\) を前から走査すると \(\mathrm{O}(N)\) かかってしまいますが、逆置換をあらかじめ計算しておくと \(q_i\) が答えになるのでクエリを \(\mathrm{O}(1)\) で処理することができます。

実装方法はわかってしまえばシンプルで、 \(1 \leq i \leq N\) に対して Q[P[i]] = i とすればよいです。
\(Q\) を昇順に埋めていないので少し非直感的ですが、このアルゴリズムによって \(P\) の要素が取り得るすべての値 \(i\) \((1 \leq i \leq N)\) に対して \(Q_i\) を埋めることができていることから正当性が確かめられます。

別解として連想配列などのデータ構造を使用しても AC することができます。

C++. Python による実装は以下の通りです。


C++





Python




		
		
			
				投稿日時:
				
				
			
				
				最終更新:
				
				
			
			
		
	
