全体的な方針としては、ルンルンの行動の選択肢はそれほど多くないので、すべての選択肢を実際に試して
最も 753 に近かった結果を採用すればよいです。以下、この方針を実装することについて書きます。
文字列 S の長さを N とし、S の最初の文字を 0 文字目、最後の文字を N − 1 文字目と呼ぶことにします。
例えば N = 6 のとき、ルンルンの行動の選択肢は「S の 0, 1, 2 文字目を取り出す」「1, 2, 3 文字目を取り出
す」「2, 3, 4 文字目」「3, 4, 5 文字目」の 4 通りです。一般的には、整数 i = 0, 1, 2, ..., N − 3 のそれぞれに対
して「S の i, i + 1, i + 2 文字目を取り出す」という抜き出し方が存在します。
あとは、「S の i, i + 1, i + 2 文字目を取り出し」て得られる 3 桁の整数をプログラム上でどのように求め
るかが主な問題です。言語によって事情が異なり、Python などでは気軽に文字列から整数への変換を行えま
すが、C++ などではやや手間です。ASCII コード上で数字 ‘0’, ‘1‘, ..., ‘9’ が順番に並んでいるという性質を
使って「自前」で変換する手も検討に値します。
そのほかに絶対値や「二つ（以上）の数のうち小さい方」などの部品も必要になりますが、言語の標準ライ
ブラリを使うとスムーズです。以下の C++, Python3 による実装例を参考にしてください。

1

#include <algorithm>

// min

2

#include <cmath>

// abs

3

#include <iostream>

4

using namespace std;

5

int main(){

6

string S;

7

cin >> S;

8

int N = S.size();

9

int ans = 999;

10

for(int i = 0; i <= N - 3; ++i){

11

int num = (c[i] - '0') * 100 + (c[i+1] - '0') * 10 + c[i+2] - '0';

12

ans = min(ans, abs(num - 753));

13

}

14

cout << ans << endl;

15

}

1

S = input()

2

print(min(abs(int(S[i:i+3]) - 753) for i in range(len(S) - 2)))

2

