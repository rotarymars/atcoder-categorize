N が小さければ、1 から N までの数をすべてチェックして七五三数を直接数えることができます。しかし
*1
与えられる N は最大で 999999999 (10 億 - 1) と大きく、2 秒という時間制限でこの方針は厳しいです。

入出力例 3 (N = 999999999, 出力: 26484) でひっそり示されているように、七五三数はそれほど多くあり
ません。ですから、「357, 375, 573, . . . 」と七五三数の方を列挙して N 以下にある個数を数えるべきです。
そのためには、まず「7, 5, 3 のみを含む数」（333 や 57577 なども該当。準七五三数と呼ぶことにします）
をすべて列挙し、そのうち「7, 5, 3 をすべて含む数」（七五三数）のみをカウントすると単純です。N 以下の
準七五三数もそれほど多くない*2 ので時間切れの心配はありません。
あとは、N 以下の準七五三数をどのように列挙するかが問題です。最も素直な手は再帰関数でしょう*3 。
「空っぽのもの」から始めて、
「持っているものの後ろに 7, 5, 3 を付け足して新たに 3 つのものを得る」ことを
繰り返します。
具体的な実装について書きます。Python などの整数と文字列の相互変換が簡単な言語では、数を主に文字
列として扱うと実装しやすいでしょう。C++ などで文字列を経由するべきかは悩むところです。経由せず整
数を直接取り扱う場合、整数を「10 倍して 5 を足す」
（例: 1234 × 10 + 5 = 12345. 後ろに 5 が付いた！）な
どの操作が役立ちます。以下の Python3 による実装例を参考にしてください。

1

N = int(input())

2
3
4
5

def dfs(s):

# 文字列 s で始まる七五三数の個数

if int(s) > N:
return 0

6

ret = 1 if all(s.count(c) > 0 for c in '753') else 0

7

for c in '753':

8
9

# s 自体が七五三数なら +1

ret += dfs(s + c)
return ret

10
11

print(dfs('0'))

# 本当は dfs('') と書きたいが 4 行目でのエラーを防ぐため仕方なく

*1 実はこの方針で C++ などの言語で無理やり間に合わせることも不可能ではありませんが、かえって難しいです。
*2 9 桁の準七五三数は 39 = 19683 個、1〜9 桁の準七五三数をすべて合わせても 29523 個
*3 他の手段としては、3 進数を小さい方から列挙して 0 → 3, 1 → 5, 2 → 7 と変換する手もあります。

3

