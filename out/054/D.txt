
Mixing Experiment

まず、物質 C を生成するための条件に注目します。タイプ A の物質とタイプ B の物質の混合比が Ma : Mb と
買った薬品は全て使うという条件から、購入した薬品の金額とそれら全てを混ぜた溶液に含まれる物質 A と物質

B の重さが重要になります。
この考察をもとに、次のような 3 次元 DP を考えます。

dp[i][ca][cb] := 1–i 番目までの薬品の組み合わせで、物質 A が ca グラム、物質 B が cb グラムとなる溶液の最小コスト

4

まず、dp テーブル全体を ∞ で初期化します。(∞ の具体的な値は、全ての薬品を買ったコスト N max(Ci ) より
大きくなるように決めます。) また、i = 0 ときイルカは薬品を 1 つも持たないので、dp[0][0][0] = 0 と初期化し
ます。次に、dp テーブルの更新を考えます。ここでは、dp[i][ca][cb] に注目して、i から i + 1 (0 ≤ i ≤ N − 1) へ
の具体的な更新方法を考えます。このとき、i + 1 番目の薬品を加える・加えないの 2 つの処理が考えられて、更
新方法は次の通りです。(ここでは、入力の A,B,C は 1-indexed ではなく、0-indexed で表されます。)

• 薬品 i を加えない場合: dp[i + 1][ca][cb] = min(dp[i + 1][ca][cb], dp[i][ca][cb])
• 薬品 i を加える場合: dp[i + 1][ca + A[i]][cb + B[i]] = min(dp[i + 1][ca + A[i]][cb + B[i]], dp[i][ca][cb] + C[i])
以上の更新を i と ca と cb に関する三重ループを用いて行います。結果として、全ての薬品の組み合わせは dp[N ][·][·]
で表されます。
最後に、ca : cb = Ma : Mb を満たしている dp[N ][ca][cb] に注目して最小コストを求めて出力します。このと
き、ca = 0 かつ cb = 0 は条件を満たさないことに気をつけて下さい。なお、ca : cb = Ma : Mb の判定には

caMb = cbMa という比の等式を使うのが簡単です。また、求めた最小コストが ∞ であるならば、物質 C を生成
できないので代わりに −1 を出力します。
ここからは、時間計算量について考えていきます。まず、三重ループの各変数が取りうる上限を考えていきま
す。薬品の個数の上限は、制約から N ≤ 40 です。物質 A の重さの上限は、N max(Ai ) ≤ 400 で表されます。同
様に、物質 B の重さの上限は、N max(Bi ) ≤ 400 で表されます。また、dp テーブルの更新は O(1) で行うことが
できます。以上のことから、この解法の時間計算量は、O(N 3 max(Ai ) max(Bi )) となり、間に合います。
N

なお、比の等式と半分全列挙を用いた時間計算量 O(2 2 N ) となる解法が存在します。(詳細は略)

C++のコード例

1

const int nmax=40,abmax=10,inf = 1000000;

2
3

int a[nmax],b[nmax],c[nmax];

4

int dp[nmax+1][nmax*abmax+1][nmax*abmax+1];

5
6
7
8

int main(void){
int n,ma,mb;
cin >> n >> ma >> mb;

9
10

for(int i=0;i<n;++i){
cin >> a[i] >> b[i] >> c[i];

11
12

}

13
14

for(int i = 0; i <= n; ++i){
for(int ca = 0; ca <= nmax*abmax; ++ca){

15

for(int cb = 0; cb <= nmax*abmax; ++cb){

16

dp[i][ca][cb]=inf;

17

}

18

}

19
20

}

21
22

dp[0][0][0]=0;
5

23

for(int i = 0; i < n; ++i){

24

for(int ca = 0; ca <= nmax*abmax; ++ca){

25
26

for(int cb = 0; cb <= nmax*abmax; ++cb){

27

if(dp[i][ca][cb]==inf) continue;

28

dp[i+1][ca][cb]=min(dp[i+1][ca][cb],dp[i][ca][cb]);

29

dp[i+1][ca+a[i]][cb+b[i]]=min(dp[i+1][ca+a[i]][cb+b[i]],dp[i][ca][cb]+c[i]);
}

30

}

31

}

32
33
34

int ans=inf;

35

for(int ca = 1; ca <= nmax*abmax; ++ca){
for(int cb = 1; cb <= nmax*abmax; ++cb){

36

if(ca*mb==cb*ma) ans=min(ans,dp[n][ca][cb]);

37

}

38

}

39
40
41

if(ans==inf) ans=-1;

42

cout << ans << endl;

43

return 0;

44
45

}

6


