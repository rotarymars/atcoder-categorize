(原案: DEGwer, 準備・解説: evima)
N は 10 万以下とあまり大きくなく、1, 2, . . . , N という N 個の数の桁数を直接数えるのが楽です。
そして、それぞれの数の桁数を数える最も素直な方法は、数を文字列に変換してその長さを数えるというも
のでしょう。最も効率的な方法ではありませんが、今回はこれで十分です。
以下に Python による実装例を二つ掲載します。他の言語でもこれらと似たような実装が可能でしょう。

1

N = int(input())

2

ans = 0

3

for i in range(1, N + 1):

4
5

if len(str(i)) % 2 == 1:
ans += 1

6

print(ans)

1

N = int(input())

2

print(len(list(filter(lambda x: len(str(x)) % 2 == 1, range(1, N + 1)))))

2

(Draft: DEGwer, Preparation and Editorial: evima)
N is not so large, no more than 100 thousands, so it is easy to count the digits of each of N numbers,
1, 2, . . . , N .
And the most natural way to count the digits of each value would be converting the number into string
and count its length. It is not the fastest way, but it is enough for now.
The following two example is implementation examples in Python. You would be able to implement
in other languages in similar way.

1

N = int(input())

2

ans = 0

3

for i in range(1, N + 1):

4
5

if len(str(i)) % 2 == 1:
ans += 1

6

print(ans)

1

N = int(input())

2

print(len(list(filter(lambda x: len(str(x)) % 2 == 1, range(1, N + 1)))))

8

