• N人に対して、M個の知人関係が与えられる。
– iさんとjさんが知人である、というような情報

• ここで、「全員が全員のことを知っている派
閥」のうち、出来るだけ人数が多いものを作り
たい。
• その人数の最大値を求めなさい。

• 「最大クリーク問題」と呼ばれる有名問題
– 無向グラフにおいて、頂点の部分集合Cに対し、C
に含まれるあらゆる2つの頂点を繋ぐ辺が存在す
るようなCを、クリークと呼ぶ。
• 今回はそのクリークのうち、最大のものを調べる

– NP困難の問題であることが知られている

• ・・・が、こんな難しいことを知っている必要は
ありません！

• 全てのパターンを試す！
• 例えば、A,B,Cの3人であれば、
– {A} {B} {C} {A,B} {B,C} {A,C} {A,B,C}の７通り

• 12人の場合も、一人一人に対して、派閥に入
れる・入れないが２通りあるので、2^12で
2048通り！
– 実際は、0人派閥はあり得ないので2047通り

• これくらいであれば、どの言語でもすべての
パターンを試せます。

D言語 解説
• パターンの調べ方１
– bitを利用した方法
• 例えば、3人であれば、1から7までのループを回す
• 2進数にすると、001, 010, 011, 100, 101, 110, 111
• 各数字に対し、どの桁が1になっているかを列挙する
– それぞれ{0} {1} {0 1} {2} {0 2} {1 2} {0 1 2}

• これを利用すると、全通り調べることが出来る

• パターンの調べ方2
– 再帰関数を使って調べる
• 深さ優先探索の要領で、人数分探索を行う

• 全パターン調べたら、派閥を作ることが出来
たパターンの中で、最も人数が多かった派閥
の人数を出力すれば良い。
– 1人派閥しか出来ない場合もあるので注意！

• 適当な貪欲法を使ってはダメ。
• 下のような方法は全て不正解となります
– 上から順番に、派閥に加えられる人を派閥に加
える
– 友人が多い人から派閥に入れていく
– 派閥を作りづらそうな人を除外していく

• 確実に正しい答えを返す回答を作る癖をつけ
ましょう！

• 他の人のソースコードを見てみよう！
– bitを使った提出例
• climpetさんの回答 C++
– http://abc002.contest.atcoder.jp/submissions/110897

• 葉月怜夢さんの回答 Ruby
– http://abc002.contest.atcoder.jp/submissions/111299

– 深さ優先探索を使った提出例
• おたっくすさんの回答 C++
– http://abc002.contest.atcoder.jp/submissions/110949


