
		公式
		
			
				D - Gomamayo Sequence 解説
			
			by cn449
			
		
		
		
		
			問題の性質を利用して前後から文字列を扱う方法について解説しています。

dp により前からのみ文字列を扱う方法はこちらで紹介しています。



\(T\) の \(i\) 文字目と \(i + 1\) 文字目が一致するような \(i\) を固定します。すると、\(1\) 文字目から \(i\) 文字目および \(i + 1\) 文字目から \(N\) 文字目は ...0101010101... のように 0 と 1 が交互に並ぶ文字列となります。

したがって、各 \(i\) に対して以下の値が計算できればよいです。


\(S\) の \(1\) 文字目から \(i\) 文字目を 01010101... のような 0 から始まり 0 と 1 が交互に並ぶ文字列にするために必要なコストの総和の最小値

\(S\) の \(1\) 文字目から \(i\) 文字目を 10101010... のような 1 から始まり 0 と 1 が交互に並ぶ文字列にするために必要なコストの総和の最小値

\(S\) の \(i + 1\) 文字目から \(N\) 文字目を ...10101010 のような 0 で終わり 0 と 1 が交互に並ぶ文字列にするために必要なコストの総和の最小値

\(S\) の \(i + 1\) 文字目から \(N\) 文字目を ...01010101 のような 1 で終わり 0 と 1 が交互に並ぶ文字列にするために必要なコストの総和の最小値


上 \(2\) つは \(i\) での計算結果から \(i + 1\) での計算結果が簡単にわかるため \(i\) の昇順、下 \(2\) つは \(i\) での計算結果から \(i - 1\) での計算結果が簡単にわかるため \(i\) の降順に計算することで答えを求めることができます。

具体的に \(1\) 番上に書いたものの計算を例にして説明します。

\(i + 1\) 文字目は \(i + 1\) が奇数のとき 0 に、偶数のとき 1 にするべきですが、これが元の \(S_{i + 1}\) と一致している場合には \(i\) での計算結果と \(i + 1\) での計算結果は一致します。そうでない場合は、\(i\) での計算結果に \(C_{i + 1}\) を足すことにより \(i + 1\) での計算結果が得られます。

実装の際には、0 で終わる / 1 で終わるというような扱いではなく、(\(N\) 文字全体のうちの) 偶数文字目が 0 で奇数文字目が 1 の文字列 / 偶数文字目が 1 で奇数文字目が 0 の文字列というような扱いをすると考えるべきことが減ると考えられます。

実装例



		
		
			
				投稿日時:
				
				
			
				
				最終更新:
				
				
			
			
		
	
