
問題概要
• 3×3 のマス目に交互に○と×を書いていきます。
• 全て埋まった後に、上下あるいは左右で隣接する 2 マスそれぞれに
ついて、同じ文字が書かれているか異なる文字が書かれているかを
判定し、同じなら直大くんに、異なるなら直子さんに得点が入ります。
• 両者が最善を尽くしたときのそれぞれの得点を計算してください。
• 1 ≦ 𝑏𝑖,𝑗 ≦ 100
• 1 ≦ 𝑐𝑖,𝑗 ≦ 100

方針
• 1 手目からいきなり 9 手目後の状態を考えるのは大変です。
• 逆に 9 手目から考えてみることにします。
• また、この問題の場合、直大くんの得点と直子さんの得点の合計値
は一定なので、直大くんは score=(直大くんの得点)-(直子さんの得
点)の最大化を、直子さんは score=(直大くんの得点)-(直子さんの得
点)の最小化を目標として行動するものとすれば、扱いが簡単になり
ます。

9 手目の状況
• 9 手目において、書くことのできる場所は 1 箇所しか無いので、書く
場所は一意に決まります。

9手目 : score=?
マス (2,3) に書く
ゲーム終了 : score=10

9 手目の状況(直大くんの手番)
• 9 手目において、書くことのできる場所は 1 箇所しか無いので、書く
場所は一意に決まります。
• そのため、9 手目の得点は、ゲーム終了時の得点と同じになります。

9手目 : score=10
マス (2,3) に書く
ゲーム終了 : score=10

8 手目の状況(直子さんの手番)
• 8 手目において、書くことのできる場所は 2 箇所あります。
• それぞれのマスについて、そこに×を置いた際に、9 手目以降がど
うなるかは、先ほどの情報より分かります。

8手目 : score=?

マス (1,1) に書く
9手目 : score=10

マス (2,3) に書く

9手目 : score=-20

8 手目の状況(直子さんの手番)
• 8 手目において、書くことのできる場所は 2 箇所あります。
• それぞれのマスについて、そこに×を置いた際に、9 手目以降がど
うなるかは、先ほどの情報より分かります。
• 直子さんは score を小さくしたいので、遷移可能な点のうち score が
最小な点に遷移すれば良いことになります。その値が 8 手目の
score となります。
8手目 : score=-20

マス (1,1) に書く
9手目 : score=10

マス (2,3) に書く

9手目 : score=-20

7 手目よりも前について
• 8 手目の score が分かるので、7 手目、6 手目、…とわかっていきます。
• 最終的に 1 手目において直大くんが置いたときの score が、両者が最善
を尽くしたときの score となります。
• まとめると、以下の再帰関数を実装すると解けます。
1. 現時点で置き場所がないなら、score を直接計算し返します。
2. すべての置き場所に対し、一旦置いてみることにします。
3. 置いた後の score をこの再帰関数を呼び出すことで計算します。
4. 直大くんの手番ならそれらの最大値を、直子さんの手番なら
それらの最小値を再帰関数の返り値とします。

備考
• この探索は、ゲーム木の探索です。
• 計算量は O(𝑁!) (𝑁 は手数)となります。
• 手数が少ないので、特に高速化しなくても計算量的には解けます。
• メモ化再帰をすることで O(2𝑁 ) にできます。
• ゲーム木の探索アルゴリズムなので、αβ枝刈りなどもできます。

