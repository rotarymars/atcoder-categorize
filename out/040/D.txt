いくつかの頂点と、その間を結ぶいくつかの辺からなる構造をグラフという。この問題では N 個の都市を
ぞれぞれ頂点、M 本の道をそれぞれ辺としてグラフの問題と見ることができる。さらに、この問題では道路
は双方向に通行可能 (一方通行ではない) で、辺にそれぞれ値がついているので、重みつきの無向グラフにつ
いての問題である。
また、無向グラフにおいて「ある頂点から辺を辿って行き来できるような頂点の集合」を連結成分と言う。
したがって、この問題はグラフの言葉を使えば以下のように言い換えられる。
「N 個の頂点と M 本の辺からなる重みつき無向グラフが与えられる。Q 個の質問に答えよ。それぞれの質
問は『重みが w より大きい辺だけを考えたとき、頂点 v が属する連結成分の大きさは？』である」
このように問題をグラフなどの言葉を使って言い換えることは、問題をグラフに関するさまざまなアルゴリ
ズムや過去に解いたことのある問題などと結びつけるのに役立つ。

50 点解法
無向グラフにおいてある頂点 v の属する連結成分を求めるには、深さ優先探索や幅優先探索などのグラフ
探索アルゴリズムを用いればよい (これら基本的なグラフ探索アルゴリズムについては検索すれば多くの解説
がある)。
こういった探索では最悪の場合すべての頂点と辺を見ることになるので、ひとつの質問に答えるために

O(N + M ) 程度の時間が必要である。
よって全体で O(Q(N + M )) 時間がかかることになり、50 点が得られる。

2

満点解法
■Union-Find

グラフの連結成分などを管理するひとつの方法として、素集合データ構造 (Disjoint-set Data

Structure) がある。日本のプログラミングコンテスト周辺では、このデータ構造のことをサポートする操作の
名前を使って Union-Find と呼ぶことが多い。Union-Find の詳しい実装などについては過去に解説が存在
する (http://www.slideshare.net/chokudai/union-find-49066733) ので参考にするとよい。
グラフの連結成分管理の観点から見ると、Union-Find に可能なのは以下の操作である。

• Union: ふたつの連結成分をつなげる。
• Find: ある頂点の属する連結成分の代表となる点を求める。
Find で代表となる点を求めることで、たとえば 2 点が同じ連結成分に属するかどうかを調べることができ
る。しかし今回の問題では連結成分の大きさを求める必要があるため、機能を追加する必要がある。
はじめにすべての点が独立した連結成分になっている状態では、どの頂点もその連結成分の大きさは 1 で
ある。その後、Union 操作によって異なる 2 つの連結成分がつなげられるときに、その大きさを足しあわせ
て持つことにすればよい。
具体的には、S[F ind(v)] を「頂点 v の属する連結成分の大きさ」とし、最初はすべて 1 で初期化してお
く。その後、頂点 u, v の属する連結成分どうしをつなげるとき、F ind(u) ̸= F ind(v) ならば、S[F ind(u)] +

S[F ind(v)] を新たな F ind(u), F ind(v) の値に対応する S の値とすればよい。
■アルゴリズム

Union-Find の重要な制約として、連結成分をつなげることはできるがその逆はできない、

というものがある。したがって、Union-Find をただ使うだけでは、各質問ごとに毎回 Union-Find を構築す
る必要があり高速化ができない。
そこで、辺の重みが大きい順 (道が新しい順) に質問に答えていくことを考える。すると、ある質問に答え
たあと次の質問に答えるとき、対象となるグラフは辺が増えることはあっても減ることはない。よってひとつ
の Union-Find を使って、辺の重みが大きい順に連結成分をつなげつつ質問に答えていくことができる。
こうすれば Union-Find の操作回数が全体で O(M + Q) 回程度になり、Union-Find の一回の操作は非常
に高速なので満点が得られる。
具体的な実装では辺と質問をまとめて新しい順にソートし、順番に見ていくようにするとよい。ただし、辺
と質問で年が同じ場合は、先に質問に答えたあとに辺を見るようにする必要があるので注意すること。

3


