基本的な動的計画法 (DP; Dynamic Programming) を用いる問題である。N が大きいので移動パターンを
すべて試すことは現実的でなく、また入出力例 2 からわかるように常にコストの安い選択をすればよいわけ
でもない。

dp[] という配列を用意し、dp[i] が「1 本目の柱から i 本目の柱へ移動するまでの合計コストの最小値」とな
るように計算をしたい。まず明らかに dp[1] = 0 である。1 より大きな i については次のように考えられる。

• i − 2 本目の柱から一気に i 本目の柱へ飛んだ場合、そのときの最小コストは dp[i − 2] + |Ai−2 − Ai |
である。

• そうではなく、i−1 本目の柱から i 本目の柱へ来た場合、そのときの最小コストは dp[i−1]+|Ai−1 −Ai |
である。
よって、i を小さい方から dp[i] の値を求めていき、それぞれの計算は上の 2 パターンのうちより小さい方
の値をとればよい。最終的に dp[N ] が求める答えとなる。

