
		公式
		
			
				G - Divide a Sequence 解説
			
			by penguinman
			
		
		
		
		
			\(\text{dp}_i\) を、\(A\) の先頭 \(i\) 項からなる数列 \(A'=(A_1,A_2,\ldots,A_i)\) について問題を解いた場合の答えと定義します。すると、以下のような漸化式が成立します（ここで \(\text{dp}_0=1\) とする）。


\(\text{dp}_i=\sum_{j=0}^{i-1} \text{dp}_j \times (\max(\{A_{j+1},A_{j+2},\ldots,A_i\})-\min(\{A_{j+1},A_{j+2},\ldots,A_i\}))\)


このような動的計画法の計算量は愚直に行うと \(O(N^2)\) となりますが、工夫により \(O(N)\) まで落とすことが可能です。

まず、上記の漸化式を \(\max\) と \(\min\) それぞれについてで分離します。


\(\text{dp}_i=\sum_{j=0}^{i-1} \text{dp}_j \times \max(\{A_{j+1},A_{j+2},\ldots,A_i\}) - \sum_{j=0}^{i-1} \text{dp}_j \times \min(\{A_{j+1},A_{j+2},\ldots,A_i\})\)


こうして得られる遷移の形、具体的には「\(\sum_{j=0}^{i-1} \text{dp}_j \times \max(\{A_{j+1},A_{j+2},\ldots,A_i\})\)」といった形は非常に高速化との相性が良いです。stack 等を用いて \(\max(\{A_{j+1},A_{j+2},\ldots,A_i\})\) の値を更新しつつ累積和を計算していくことで、線形時間で \(\text{dp}\) を行うことができます。

具体的には、stack に以下の \(2\) つをセットにして積んでいき、適切に差分を更新していけばよいです。


\(\max(\{A_{j+1},A_{j+2},\ldots,A_i\})\) の値
\(\max(\{A_{k+1},A_{k+2},\ldots,A_i\})\) の値が上に等しくなるようなすべての \(k\) についての \(\text{dp}_k\) の総和


\(\min\) パートについてもほぼ同様です。

実装例 (C++)



なお、この他にも Cartesian Tree の構造に注目した \(\text{dp}\) 高速化手法も存在します（参考：https://atcoder.jp/contests/arc115/tasks/arc115_e ）

		
		
			
				投稿日時:
				
				
			
				
				最終更新:
				
				
			
			
		
	
