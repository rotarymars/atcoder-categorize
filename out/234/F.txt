
		公式
		
			
				F - Reordering 解説
			
			by penguinman
			
		
		
		
		
			\(S\) の空でない、連続した部分列 \(S'\) を並び替えて得られる文字列の種類数は、\(S'\) における各アルファベットの出現数のみに依存します。

そのためこの問題を動的計画法に落とし込む際には


何番目のアルファベットまでを使ったか
合計で何文字を使ったか


の \(2\) つを状態に持つことが重要であり、故に以下のような動的計画法を考えることが有効です。


\(\text{dp}_{i,j}:=(\)アルファベットの昇順で \(i\) 番目のアルファベットまでを使い、使った文字数の合計が \(j\) であるような \(S\) の部分列、およびその並び替えの個数\()\)


そしてその遷移は、\(S\) における a から z までのアルファベットの出現数をそれぞれ \(\text{freq}_1,\text{freq}_2,\ldots,\text{freq}_{26}\) として以下のようになります。


\(\text{dp}_{i,j} = \sum_{k=0}^{\min(j,\text{freq}_i)} \text{dp}_{i-1,j-k} \times \binom{j}{k}\)


計算量は一見すると \(σ=26\), \(N\) を \(S\) の長さとして \(O(σN^2)\) かかっていそうですが、\(\text{dp}_{i,j}\) への遷移にかかる計算量が高々 \(O(\text{freq}_i)\) であることを踏まえると合計での計算量は高々 \(O(\sum_{i=1}^{26} \text{freq}_i \times N)=O((\sum_{i=1}^{26} \text{freq}_i) \times N)=O(N \times N)=O(N^2)\) となります。

求める答えは \(\sum_{i=1}^{N} \text{dp}_{26,i}\) です。

実装例 (C++)



		
		
			
				投稿日時:
				
				
			
				
				最終更新:
				
				
			
			
		
	
