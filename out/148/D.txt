以下、「すぬけさんが満足するレンガの砕き方」を「いい砕き方」と言います。
まず 1 が書かれたレンガが存在しない場合、答えは明らかに −1 です。
そうでない場合、1 が書かれたレンガの中で最も左にあるものの番号を i とします。このとき、i
番目のレンガを砕く「いい砕き方」に対して、それと同じ個数のレンガが残るような、i 番目のレン
ガを砕かない「いい砕き方」が存在します。というのも、元の砕き方で残る 1 が書かれたレンガを砕
き、代わりに i 番目のレンガを砕かないとしても変わらず「いい砕き方」になるからです。よって、
残すレンガの個数が最大の「いい砕き方」を探す上で、i 番目のレンガは砕かないと仮定しても問題
ありません。
同様の考え方をすると、i 番目のレンガより右にあるレンガの中に 2 が書かれたものが存在してい
れば、そのうち最も左にあるものは砕かずに残すと仮定することが可能です。
この貪欲的なアプローチを繰り返していくことで、残すレンガの個数が最大の「いい砕き方」を見
つけることができます。
組合せ最適化問題を解く際に、ある要素を選んで損をすることがないので、その要素を選ぶと仮定
して探索空間を小さくする、というアイデアは、競技プログラミングにおける貪欲法で典型的です。

5

Hereinafter we will call a combination of bricks you will break ”good” if Snuke will be satisﬁed
after they are broken.
First, if there are no bricks that 1 is written on it, then the answer is obviously −1.
Otherwise, let i be the index of the leftmost brick with 1 written on it. Then, for any ”good
combination” including i-th brick, there exists a ”good combination” of same size such that i
is not included. This is because if you break the brick with 1 written on it which originally
remains, and instead leaving i-th brick unbroken, then the resulting combination of bricks is still
good. Therefore, when looking for the ”good combination” of breaking such that the number of
remaining blocks is maximum, you can always assume that you will not break i-th block.
Similarly, if there exists a brick with 2 written on it on the right of i-th brick, then you can
assume that you will leave the leftmost brick among them without breaking.
By repeating this greedy approach, you can ﬁnd a ”good combination” of breaking such that
the number of remaining blocks is maximum.
When solving combinational optimization problem, the idea of ”choosing this element does
not lead to disadvantage, so we can narrow down the search space by assuming that we choose
it” is very typical in greedy algorithms in competitive programming.

12

